
GLOVE_FOR_DEAF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000274a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  0000274a  000027de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008001fe  008001fe  0000297c  2**0
                  ALLOC
  3 .stab         00001ef0  00000000  00000000  0000297c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e6  00000000  00000000  0000486c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005952  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00005ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00005ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00007cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00008e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00009fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a289  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 12 	call	0x2414	; 0x2414 <main>
      8a:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ef       	ldi	r26, 0xF5	; 245
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ef       	ldi	r24, 0xF5	; 245
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e3 50       	subi	r30, 0x03	; 3
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_voidSetPinDirection>:
#include"DIO_priv.h"
#include"DIO_conf.h"



void DIO_voidSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <DIO_voidSetPinDirection+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <DIO_voidSetPinDirection+0x8>
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	6a 83       	std	Y+2, r22	; 0x02
     ce8:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&Copy_u8Direction<=DIO_u8OUTPUT){
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	84 30       	cpi	r24, 0x04	; 4
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <DIO_voidSetPinDirection+0x1c>
     cf0:	ce c0       	rjmp	.+412    	; 0xe8e <DIO_voidSetPinDirection+0x1b8>
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	88 30       	cpi	r24, 0x08	; 8
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <DIO_voidSetPinDirection+0x24>
     cf8:	ca c0       	rjmp	.+404    	; 0xe8e <DIO_voidSetPinDirection+0x1b8>
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	82 30       	cpi	r24, 0x02	; 2
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <DIO_voidSetPinDirection+0x2c>
     d00:	c6 c0       	rjmp	.+396    	; 0xe8e <DIO_voidSetPinDirection+0x1b8>
		switch(Copy_u8GroupID){
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	3d 83       	std	Y+5, r19	; 0x05
     d0a:	2c 83       	std	Y+4, r18	; 0x04
     d0c:	6c 81       	ldd	r22, Y+4	; 0x04
     d0e:	7d 81       	ldd	r23, Y+5	; 0x05
     d10:	61 30       	cpi	r22, 0x01	; 1
     d12:	71 05       	cpc	r23, r1
     d14:	09 f4       	brne	.+2      	; 0xd18 <DIO_voidSetPinDirection+0x42>
     d16:	41 c0       	rjmp	.+130    	; 0xd9a <DIO_voidSetPinDirection+0xc4>
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	9d 81       	ldd	r25, Y+5	; 0x05
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	91 05       	cpc	r25, r1
     d20:	34 f4       	brge	.+12     	; 0xd2e <DIO_voidSetPinDirection+0x58>
     d22:	2c 81       	ldd	r18, Y+4	; 0x04
     d24:	3d 81       	ldd	r19, Y+5	; 0x05
     d26:	21 15       	cp	r18, r1
     d28:	31 05       	cpc	r19, r1
     d2a:	71 f0       	breq	.+28     	; 0xd48 <DIO_voidSetPinDirection+0x72>
     d2c:	b0 c0       	rjmp	.+352    	; 0xe8e <DIO_voidSetPinDirection+0x1b8>
     d2e:	6c 81       	ldd	r22, Y+4	; 0x04
     d30:	7d 81       	ldd	r23, Y+5	; 0x05
     d32:	62 30       	cpi	r22, 0x02	; 2
     d34:	71 05       	cpc	r23, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <DIO_voidSetPinDirection+0x64>
     d38:	59 c0       	rjmp	.+178    	; 0xdec <DIO_voidSetPinDirection+0x116>
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	83 30       	cpi	r24, 0x03	; 3
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_voidSetPinDirection+0x70>
     d44:	7c c0       	rjmp	.+248    	; 0xe3e <DIO_voidSetPinDirection+0x168>
     d46:	a3 c0       	rjmp	.+326    	; 0xe8e <DIO_voidSetPinDirection+0x1b8>
		case DIO_u8GROUP_A:
			DDRA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
     d48:	aa e3       	ldi	r26, 0x3A	; 58
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	ea e3       	ldi	r30, 0x3A	; 58
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <DIO_voidSetPinDirection+0x8e>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	2a 95       	dec	r18
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <DIO_voidSetPinDirection+0x8a>
     d68:	80 95       	com	r24
     d6a:	84 23       	and	r24, r20
     d6c:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Direction<<Copy_u8PinID);
     d6e:	aa e3       	ldi	r26, 0x3A	; 58
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ea e3       	ldi	r30, 0x3A	; 58
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	b9 01       	movw	r22, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_voidSetPinDirection+0xb8>
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	8a 95       	dec	r24
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_voidSetPinDirection+0xb4>
     d92:	cb 01       	movw	r24, r22
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	7a c0       	rjmp	.+244    	; 0xe8e <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
     d9a:	a7 e3       	ldi	r26, 0x37	; 55
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e7 e3       	ldi	r30, 0x37	; 55
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_voidSetPinDirection+0xe0>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	2a 95       	dec	r18
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_voidSetPinDirection+0xdc>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Direction<<Copy_u8PinID);
     dc0:	a7 e3       	ldi	r26, 0x37	; 55
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e7 e3       	ldi	r30, 0x37	; 55
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	48 2f       	mov	r20, r24
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	b9 01       	movw	r22, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_voidSetPinDirection+0x10a>
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	8a 95       	dec	r24
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_voidSetPinDirection+0x106>
     de4:	cb 01       	movw	r24, r22
     de6:	84 2b       	or	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	51 c0       	rjmp	.+162    	; 0xe8e <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
     dec:	a4 e3       	ldi	r26, 0x34	; 52
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e4 e3       	ldi	r30, 0x34	; 52
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_voidSetPinDirection+0x132>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	2a 95       	dec	r18
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_voidSetPinDirection+0x12e>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Direction<<Copy_u8PinID);
     e12:	a4 e3       	ldi	r26, 0x34	; 52
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e4 e3       	ldi	r30, 0x34	; 52
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	b9 01       	movw	r22, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_voidSetPinDirection+0x15c>
     e2e:	66 0f       	add	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	8a 95       	dec	r24
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_voidSetPinDirection+0x158>
     e36:	cb 01       	movw	r24, r22
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	28 c0       	rjmp	.+80     	; 0xe8e <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
     e3e:	a1 e3       	ldi	r26, 0x31	; 49
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e1 e3       	ldi	r30, 0x31	; 49
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_voidSetPinDirection+0x184>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	2a 95       	dec	r18
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_voidSetPinDirection+0x180>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Direction<<Copy_u8PinID);
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	b9 01       	movw	r22, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_voidSetPinDirection+0x1ae>
     e80:	66 0f       	add	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_voidSetPinDirection+0x1aa>
     e88:	cb 01       	movw	r24, r22
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
		}

	}

	return ;
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <DIO_voidSetPinValue+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <DIO_voidSetPinValue+0x8>
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	6a 83       	std	Y+2, r22	; 0x02
     eb0:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&DIO_u8HIGH){
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	84 30       	cpi	r24, 0x04	; 4
     eb6:	08 f0       	brcs	.+2      	; 0xeba <DIO_voidSetPinValue+0x1c>
     eb8:	ca c0       	rjmp	.+404    	; 0x104e <DIO_voidSetPinValue+0x1b0>
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	88 30       	cpi	r24, 0x08	; 8
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <DIO_voidSetPinValue+0x24>
     ec0:	c6 c0       	rjmp	.+396    	; 0x104e <DIO_voidSetPinValue+0x1b0>
		switch(Copy_u8GroupID){
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	3d 83       	std	Y+5, r19	; 0x05
     eca:	2c 83       	std	Y+4, r18	; 0x04
     ecc:	6c 81       	ldd	r22, Y+4	; 0x04
     ece:	7d 81       	ldd	r23, Y+5	; 0x05
     ed0:	61 30       	cpi	r22, 0x01	; 1
     ed2:	71 05       	cpc	r23, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <DIO_voidSetPinValue+0x3a>
     ed6:	41 c0       	rjmp	.+130    	; 0xf5a <DIO_voidSetPinValue+0xbc>
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	91 05       	cpc	r25, r1
     ee0:	34 f4       	brge	.+12     	; 0xeee <DIO_voidSetPinValue+0x50>
     ee2:	2c 81       	ldd	r18, Y+4	; 0x04
     ee4:	3d 81       	ldd	r19, Y+5	; 0x05
     ee6:	21 15       	cp	r18, r1
     ee8:	31 05       	cpc	r19, r1
     eea:	71 f0       	breq	.+28     	; 0xf08 <DIO_voidSetPinValue+0x6a>
     eec:	b0 c0       	rjmp	.+352    	; 0x104e <DIO_voidSetPinValue+0x1b0>
     eee:	6c 81       	ldd	r22, Y+4	; 0x04
     ef0:	7d 81       	ldd	r23, Y+5	; 0x05
     ef2:	62 30       	cpi	r22, 0x02	; 2
     ef4:	71 05       	cpc	r23, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <DIO_voidSetPinValue+0x5c>
     ef8:	59 c0       	rjmp	.+178    	; 0xfac <DIO_voidSetPinValue+0x10e>
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	91 05       	cpc	r25, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <DIO_voidSetPinValue+0x68>
     f04:	7c c0       	rjmp	.+248    	; 0xffe <DIO_voidSetPinValue+0x160>
     f06:	a3 c0       	rjmp	.+326    	; 0x104e <DIO_voidSetPinValue+0x1b0>
		case DIO_u8GROUP_A:
			PORTA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
     f08:	ab e3       	ldi	r26, 0x3B	; 59
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e3       	ldi	r30, 0x3B	; 59
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_voidSetPinValue+0x86>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	2a 95       	dec	r18
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_voidSetPinValue+0x82>
     f28:	80 95       	com	r24
     f2a:	84 23       	and	r24, r20
     f2c:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
     f2e:	ab e3       	ldi	r26, 0x3B	; 59
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	eb e3       	ldi	r30, 0x3B	; 59
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	b9 01       	movw	r22, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_voidSetPinValue+0xb0>
     f4a:	66 0f       	add	r22, r22
     f4c:	77 1f       	adc	r23, r23
     f4e:	8a 95       	dec	r24
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_voidSetPinValue+0xac>
     f52:	cb 01       	movw	r24, r22
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	7a c0       	rjmp	.+244    	; 0x104e <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
     f5a:	a8 e3       	ldi	r26, 0x38	; 56
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e8 e3       	ldi	r30, 0x38	; 56
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_voidSetPinValue+0xd8>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	2a 95       	dec	r18
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_voidSetPinValue+0xd4>
     f7a:	80 95       	com	r24
     f7c:	84 23       	and	r24, r20
     f7e:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
     f80:	a8 e3       	ldi	r26, 0x38	; 56
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e8 e3       	ldi	r30, 0x38	; 56
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	b9 01       	movw	r22, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_voidSetPinValue+0x102>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_voidSetPinValue+0xfe>
     fa4:	cb 01       	movw	r24, r22
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	51 c0       	rjmp	.+162    	; 0x104e <DIO_voidSetPinValue+0x1b0>
		 break;
		case DIO_u8GROUP_C:
			PORTC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
     fac:	a5 e3       	ldi	r26, 0x35	; 53
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e5 e3       	ldi	r30, 0x35	; 53
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_voidSetPinValue+0x12a>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	2a 95       	dec	r18
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_voidSetPinValue+0x126>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
     fd2:	a5 e3       	ldi	r26, 0x35	; 53
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e3       	ldi	r30, 0x35	; 53
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	b9 01       	movw	r22, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_voidSetPinValue+0x154>
     fee:	66 0f       	add	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	8a 95       	dec	r24
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_voidSetPinValue+0x150>
     ff6:	cb 01       	movw	r24, r22
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	28 c0       	rjmp	.+80     	; 0x104e <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
     ffe:	a2 e3       	ldi	r26, 0x32	; 50
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e2 e3       	ldi	r30, 0x32	; 50
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_voidSetPinValue+0x17c>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	2a 95       	dec	r18
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_voidSetPinValue+0x178>
    101e:	80 95       	com	r24
    1020:	84 23       	and	r24, r20
    1022:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    1024:	a2 e3       	ldi	r26, 0x32	; 50
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e2 e3       	ldi	r30, 0x32	; 50
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	b9 01       	movw	r22, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_voidSetPinValue+0x1a6>
    1040:	66 0f       	add	r22, r22
    1042:	77 1f       	adc	r23, r23
    1044:	8a 95       	dec	r24
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_voidSetPinValue+0x1a2>
    1048:	cb 01       	movw	r24, r22
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
			break;
		}
	}

	return ;
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <DIO_voidTogglePinValue+0x6>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <DIO_voidTogglePinValue+0x8>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	08 f0       	brcs	.+2      	; 0x1076 <DIO_voidTogglePinValue+0x18>
    1074:	72 c0       	rjmp	.+228    	; 0x115a <DIO_voidTogglePinValue+0xfc>
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	88 30       	cpi	r24, 0x08	; 8
    107a:	08 f0       	brcs	.+2      	; 0x107e <DIO_voidTogglePinValue+0x20>
    107c:	6e c0       	rjmp	.+220    	; 0x115a <DIO_voidTogglePinValue+0xfc>
		switch(Copy_u8GroupID){
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	3c 83       	std	Y+4, r19	; 0x04
    1086:	2b 83       	std	Y+3, r18	; 0x03
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	49 f1       	breq	.+82     	; 0x10e4 <DIO_voidTogglePinValue+0x86>
    1092:	2b 81       	ldd	r18, Y+3	; 0x03
    1094:	3c 81       	ldd	r19, Y+4	; 0x04
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	2c f4       	brge	.+10     	; 0x10a6 <DIO_voidTogglePinValue+0x48>
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9c 81       	ldd	r25, Y+4	; 0x04
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 f0       	breq	.+24     	; 0x10bc <DIO_voidTogglePinValue+0x5e>
    10a4:	5a c0       	rjmp	.+180    	; 0x115a <DIO_voidTogglePinValue+0xfc>
    10a6:	2b 81       	ldd	r18, Y+3	; 0x03
    10a8:	3c 81       	ldd	r19, Y+4	; 0x04
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	71 f1       	breq	.+92     	; 0x110c <DIO_voidTogglePinValue+0xae>
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	e9 f1       	breq	.+122    	; 0x1134 <DIO_voidTogglePinValue+0xd6>
    10ba:	4f c0       	rjmp	.+158    	; 0x115a <DIO_voidTogglePinValue+0xfc>
		case DIO_u8GROUP_A:
			PORTA ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_voidTogglePinValue+0x7c>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_voidTogglePinValue+0x78>
    10de:	84 27       	eor	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	3b c0       	rjmp	.+118    	; 0x115a <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_B:
		   PORTB ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_voidTogglePinValue+0xa4>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_voidTogglePinValue+0xa0>
    1106:	84 27       	eor	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	27 c0       	rjmp	.+78     	; 0x115a <DIO_voidTogglePinValue+0xfc>
		   break;
		case DIO_u8GROUP_C:
			PORTC ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    110c:	a5 e3       	ldi	r26, 0x35	; 53
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_voidTogglePinValue+0xcc>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_voidTogglePinValue+0xc8>
    112e:	84 27       	eor	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	13 c0       	rjmp	.+38     	; 0x115a <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1134:	a2 e3       	ldi	r26, 0x32	; 50
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_voidTogglePinValue+0xf4>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_voidTogglePinValue+0xf0>
    1156:	84 27       	eor	r24, r20
    1158:	8c 93       	st	X, r24

		}
	}

	return ;
}
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value){
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <DIO_voidGetPinValue+0x6>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <DIO_voidGetPinValue+0x8>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <DIO_voidGetPinValue+0xa>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	6a 83       	std	Y+2, r22	; 0x02
    117a:	5c 83       	std	Y+4, r21	; 0x04
    117c:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	08 f0       	brcs	.+2      	; 0x1186 <DIO_voidGetPinValue+0x1e>
    1184:	74 c0       	rjmp	.+232    	; 0x126e <DIO_voidGetPinValue+0x106>
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	88 30       	cpi	r24, 0x08	; 8
    118a:	08 f0       	brcs	.+2      	; 0x118e <DIO_voidGetPinValue+0x26>
    118c:	70 c0       	rjmp	.+224    	; 0x126e <DIO_voidGetPinValue+0x106>
		switch (Copy_u8GroupID){
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	3e 83       	std	Y+6, r19	; 0x06
    1196:	2d 83       	std	Y+5, r18	; 0x05
    1198:	4d 81       	ldd	r20, Y+5	; 0x05
    119a:	5e 81       	ldd	r21, Y+6	; 0x06
    119c:	41 30       	cpi	r20, 0x01	; 1
    119e:	51 05       	cpc	r21, r1
    11a0:	59 f1       	breq	.+86     	; 0x11f8 <DIO_voidGetPinValue+0x90>
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	91 05       	cpc	r25, r1
    11aa:	34 f4       	brge	.+12     	; 0x11b8 <DIO_voidGetPinValue+0x50>
    11ac:	2d 81       	ldd	r18, Y+5	; 0x05
    11ae:	3e 81       	ldd	r19, Y+6	; 0x06
    11b0:	21 15       	cp	r18, r1
    11b2:	31 05       	cpc	r19, r1
    11b4:	69 f0       	breq	.+26     	; 0x11d0 <DIO_voidGetPinValue+0x68>
    11b6:	5b c0       	rjmp	.+182    	; 0x126e <DIO_voidGetPinValue+0x106>
    11b8:	4d 81       	ldd	r20, Y+5	; 0x05
    11ba:	5e 81       	ldd	r21, Y+6	; 0x06
    11bc:	42 30       	cpi	r20, 0x02	; 2
    11be:	51 05       	cpc	r21, r1
    11c0:	79 f1       	breq	.+94     	; 0x1220 <DIO_voidGetPinValue+0xb8>
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	91 05       	cpc	r25, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <DIO_voidGetPinValue+0x66>
    11cc:	3d c0       	rjmp	.+122    	; 0x1248 <DIO_voidGetPinValue+0xe0>
    11ce:	4f c0       	rjmp	.+158    	; 0x126e <DIO_voidGetPinValue+0x106>
		case DIO_u8GROUP_A:
			*Copy_pu8Value=(PINA>>Copy_u8PinID)&DIO_u8BIT_MASK;
    11d0:	e9 e3       	ldi	r30, 0x39	; 57
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a9 01       	movw	r20, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_voidGetPinValue+0x80>
    11e4:	55 95       	asr	r21
    11e6:	47 95       	ror	r20
    11e8:	8a 95       	dec	r24
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_voidGetPinValue+0x7c>
    11ec:	ca 01       	movw	r24, r20
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	eb 81       	ldd	r30, Y+3	; 0x03
    11f2:	fc 81       	ldd	r31, Y+4	; 0x04
    11f4:	80 83       	st	Z, r24
    11f6:	3b c0       	rjmp	.+118    	; 0x126e <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_B:
			*Copy_pu8Value=(PINB>>Copy_u8PinID)&DIO_u8BIT_MASK;
    11f8:	e6 e3       	ldi	r30, 0x36	; 54
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_voidGetPinValue+0xa8>
    120c:	55 95       	asr	r21
    120e:	47 95       	ror	r20
    1210:	8a 95       	dec	r24
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_voidGetPinValue+0xa4>
    1214:	ca 01       	movw	r24, r20
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	eb 81       	ldd	r30, Y+3	; 0x03
    121a:	fc 81       	ldd	r31, Y+4	; 0x04
    121c:	80 83       	st	Z, r24
    121e:	27 c0       	rjmp	.+78     	; 0x126e <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_C:
			*Copy_pu8Value=(PINC>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1220:	e3 e3       	ldi	r30, 0x33	; 51
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a9 01       	movw	r20, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_voidGetPinValue+0xd0>
    1234:	55 95       	asr	r21
    1236:	47 95       	ror	r20
    1238:	8a 95       	dec	r24
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_voidGetPinValue+0xcc>
    123c:	ca 01       	movw	r24, r20
    123e:	81 70       	andi	r24, 0x01	; 1
    1240:	eb 81       	ldd	r30, Y+3	; 0x03
    1242:	fc 81       	ldd	r31, Y+4	; 0x04
    1244:	80 83       	st	Z, r24
    1246:	13 c0       	rjmp	.+38     	; 0x126e <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_D:
			*Copy_pu8Value=(PIND>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1248:	e0 e3       	ldi	r30, 0x30	; 48
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_voidGetPinValue+0xf8>
    125c:	55 95       	asr	r21
    125e:	47 95       	ror	r20
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_voidGetPinValue+0xf4>
    1264:	ca 01       	movw	r24, r20
    1266:	81 70       	andi	r24, 0x01	; 1
    1268:	eb 81       	ldd	r30, Y+3	; 0x03
    126a:	fc 81       	ldd	r31, Y+4	; 0x04
    126c:	80 83       	st	Z, r24

		}
	}

	return;
}
    126e:	26 96       	adiw	r28, 0x06	; 6
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <ADC_voidInit>:

static void(*ADC_pFunISRFun)(void) =NULL;


void ADC_voidInit(void)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= 0xF8;
    1288:	a6 e2       	ldi	r26, 0x26	; 38
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e6 e2       	ldi	r30, 0x26	; 38
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	88 7f       	andi	r24, 0xF8	; 248
    1294:	8c 93       	st	X, r24
#if ADC_PRES == PRES_64
	ADCSRA |= 6;
    1296:	a6 e2       	ldi	r26, 0x26	; 38
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e6 e2       	ldi	r30, 0x26	; 38
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	86 60       	ori	r24, 0x06	; 6
    12a2:	8c 93       	st	X, r24
#endif

	ADMUX &= 0x3F;
    12a4:	a7 e2       	ldi	r26, 0x27	; 39
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e7 e2       	ldi	r30, 0x27	; 39
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8f 73       	andi	r24, 0x3F	; 63
    12b0:	8c 93       	st	X, r24
#if ADC_VREF == AVCC_REF
	ADMUX |= (1<<6);
    12b2:	a7 e2       	ldi	r26, 0x27	; 39
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e7 e2       	ldi	r30, 0x27	; 39
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 64       	ori	r24, 0x40	; 64
    12be:	8c 93       	st	X, r24
#endif

#if ADC_ADJUST == LEFT_ADJUST
	ADMUX |= (1<<5);
    12c0:	a7 e2       	ldi	r26, 0x27	; 39
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e7 e2       	ldi	r30, 0x27	; 39
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 62       	ori	r24, 0x20	; 32
    12cc:	8c 93       	st	X, r24
#endif

#if INIT_CHNNL >=0 && INIT_CHNNL <=31
	ADMUX &= 0xE0;
    12ce:	a7 e2       	ldi	r26, 0x27	; 39
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e7 e2       	ldi	r30, 0x27	; 39
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 7e       	andi	r24, 0xE0	; 224
    12da:	8c 93       	st	X, r24
	ADMUX |= INIT_CHNNL;
    12dc:	a7 e2       	ldi	r26, 0x27	; 39
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e7 e2       	ldi	r30, 0x27	; 39
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8c 93       	st	X, r24
#endif

#if ADC_INTERRUPT_MODE == INTERRUPT
	ADCSRA |= (1<<3);
#elif ADC_INTERRUPT_MODE == POLLING
	ADCSRA &=~ (1<<3);
    12e8:	a6 e2       	ldi	r26, 0x26	; 38
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e6 e2       	ldi	r30, 0x26	; 38
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	87 7f       	andi	r24, 0xF7	; 247
    12f4:	8c 93       	st	X, r24
#endif

#if ADC_TRIGGER_SOURCE == SINGLE
	ADCSRA &= ~(1<<5);
    12f6:	a6 e2       	ldi	r26, 0x26	; 38
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e6 e2       	ldi	r30, 0x26	; 38
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	8f 7d       	andi	r24, 0xDF	; 223
    1302:	8c 93       	st	X, r24
#endif

	//enable ADC peripheral
	ADCSRA |= (1<<7);
    1304:	a6 e2       	ldi	r26, 0x26	; 38
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e6 e2       	ldi	r30, 0x26	; 38
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	80 68       	ori	r24, 0x80	; 128
    1310:	8c 93       	st	X, r24

	return ;
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <ADC_voidSelectChannel>:
void ADC_voidSelectChannel(u8 Copy_u8ChannelID)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8ChannelID < 32 )
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	80 32       	cpi	r24, 0x20	; 32
    1328:	78 f4       	brcc	.+30     	; 0x1348 <ADC_voidSelectChannel+0x30>
	{
		ADMUX &= 0xE0; // ADMUX &= ~ 0x1F; //ADMUX &= ~(31<<0) ;
    132a:	a7 e2       	ldi	r26, 0x27	; 39
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e7 e2       	ldi	r30, 0x27	; 39
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	80 7e       	andi	r24, 0xE0	; 224
    1336:	8c 93       	st	X, r24
		ADMUX |= (Copy_u8ChannelID);
    1338:	a7 e2       	ldi	r26, 0x27	; 39
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e7 e2       	ldi	r30, 0x27	; 39
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	90 81       	ld	r25, Z
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	89 2b       	or	r24, r25
    1346:	8c 93       	st	X, r24
	}

	return;
}
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <ADC_voidStartConversion>:
void ADC_voidStartConversion(void)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= (1<<6);
    1358:	a6 e2       	ldi	r26, 0x26	; 38
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e6 e2       	ldi	r30, 0x26	; 38
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	80 64       	ori	r24, 0x40	; 64
    1364:	8c 93       	st	X, r24

	return ;
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <ADC_voidEnableAutoTrigger>:
void ADC_voidEnableAutoTrigger(u8 Copy_u8TiggerSource)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	89 83       	std	Y+1, r24	; 0x01


	if (Copy_u8TiggerSource <= 7)
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	40 f5       	brcc	.+80     	; 0x13ce <ADC_voidEnableAutoTrigger+0x62>
	{
		ADCSRA &=~(1<<5);
    137e:	a6 e2       	ldi	r26, 0x26	; 38
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e6 e2       	ldi	r30, 0x26	; 38
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8f 7d       	andi	r24, 0xDF	; 223
    138a:	8c 93       	st	X, r24

		SFIOR &= 0x1F ; // SFIOR &= ~0xE0 ; SFIOR &= ~(7<<5) ;
    138c:	a0 e5       	ldi	r26, 0x50	; 80
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e0 e5       	ldi	r30, 0x50	; 80
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8f 71       	andi	r24, 0x1F	; 31
    1398:	8c 93       	st	X, r24
		SFIOR |= (Copy_u8TiggerSource << 5);
    139a:	a0 e5       	ldi	r26, 0x50	; 80
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e0 e5       	ldi	r30, 0x50	; 80
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	28 2f       	mov	r18, r24
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	82 95       	swap	r24
    13b2:	92 95       	swap	r25
    13b4:	90 7f       	andi	r25, 0xF0	; 240
    13b6:	98 27       	eor	r25, r24
    13b8:	80 7f       	andi	r24, 0xF0	; 240
    13ba:	98 27       	eor	r25, r24
    13bc:	82 2b       	or	r24, r18
    13be:	8c 93       	st	X, r24

		ADCSRA |= (1<<5);
    13c0:	a6 e2       	ldi	r26, 0x26	; 38
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e6 e2       	ldi	r30, 0x26	; 38
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 62       	ori	r24, 0x20	; 32
    13cc:	8c 93       	st	X, r24
	}

	return;
}
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <ADC_voidDisableAutoTrigger>:

void ADC_voidDisableAutoTrigger(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &=~(1<<5);
    13de:	a6 e2       	ldi	r26, 0x26	; 38
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e6 e2       	ldi	r30, 0x26	; 38
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8f 7d       	andi	r24, 0xDF	; 223
    13ea:	8c 93       	st	X, r24
	return;
}
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <ADC_voidRead>:

void ADC_voidRead(u16 * Copy_u16ADCValue)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <ADC_voidRead+0x6>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01

#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_u16ADCValue  = ADCL;
	*Copy_u16ADCValue |= ((u16)ADCH << 8);
#elif ADC_ADJUST == LEFT_ADJUST
	*Copy_u16ADCValue  = (ADCL>>6);
    1400:	e4 e2       	ldi	r30, 0x24	; 36
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	82 95       	swap	r24
    1408:	86 95       	lsr	r24
    140a:	86 95       	lsr	r24
    140c:	83 70       	andi	r24, 0x03	; 3
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	e9 81       	ldd	r30, Y+1	; 0x01
    1414:	fa 81       	ldd	r31, Y+2	; 0x02
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
	*Copy_u16ADCValue |= ((u16)ADCH<<2);
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	20 81       	ld	r18, Z
    1420:	31 81       	ldd	r19, Z+1	; 0x01
    1422:	e5 e2       	ldi	r30, 0x25	; 37
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	82 2b       	or	r24, r18
    1436:	93 2b       	or	r25, r19
    1438:	e9 81       	ldd	r30, Y+1	; 0x01
    143a:	fa 81       	ldd	r31, Y+2	; 0x02
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
#else
#error"ADC adjustment is wrong"
#endif

	return ;
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <ADC_voidReadHigh>:

void ADC_voidReadHigh(u8 * Copy_u8ADCValue)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <ADC_voidReadHigh+0x6>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_u8ADCValue  = (ADCL>>2);
	*Copy_u8ADCValue |= ((u16)ADCH << 6);
#warning "to high resolution, it should be left adjust, but now it works"
#elif ADC_ADJUST == LEFT_ADJUST
	*Copy_u8ADCValue  = ADCH;
    1458:	e5 e2       	ldi	r30, 0x25	; 37
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	80 83       	st	Z, r24
#else
#error"ADC adjustment is wrong"
#endif

	return;
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <ADC_voidPollingRead>:

void ADC_voidPollingRead(u16 * Copy_u16ADCValue)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <ADC_voidPollingRead+0x6>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01

	while (! ((ADCSRA >> 4) & 1 ));
    147c:	e6 e2       	ldi	r30, 0x26	; 38
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	82 95       	swap	r24
    1484:	8f 70       	andi	r24, 0x0F	; 15
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	81 70       	andi	r24, 0x01	; 1
    148c:	90 70       	andi	r25, 0x00	; 0
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	a9 f3       	breq	.-22     	; 0x147c <ADC_voidPollingRead+0xe>

#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_u16ADCValue  = ADCL;
	*Copy_u16ADCValue |= ((u16)ADCH << 8);
#elif ADC_ADJUST == LEFT_ADJUST
	*Copy_u16ADCValue  = (ADCL>>6);
    1492:	e4 e2       	ldi	r30, 0x24	; 36
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	82 95       	swap	r24
    149a:	86 95       	lsr	r24
    149c:	86 95       	lsr	r24
    149e:	83 70       	andi	r24, 0x03	; 3
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	e9 81       	ldd	r30, Y+1	; 0x01
    14a6:	fa 81       	ldd	r31, Y+2	; 0x02
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
	*Copy_u16ADCValue |= ((u16)ADCH<<2);
    14ac:	e9 81       	ldd	r30, Y+1	; 0x01
    14ae:	fa 81       	ldd	r31, Y+2	; 0x02
    14b0:	20 81       	ld	r18, Z
    14b2:	31 81       	ldd	r19, Z+1	; 0x01
    14b4:	e5 e2       	ldi	r30, 0x25	; 37
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	82 2b       	or	r24, r18
    14c8:	93 2b       	or	r25, r19
    14ca:	e9 81       	ldd	r30, Y+1	; 0x01
    14cc:	fa 81       	ldd	r31, Y+2	; 0x02
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	80 83       	st	Z, r24
//#warning "to read full resolution, it should be right adjust, but now it works"
#else
#error"ADC adjustment is wrong"
#endif

	ADCSRA |= (1<<4);
    14d2:	a6 e2       	ldi	r26, 0x26	; 38
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e6 e2       	ldi	r30, 0x26	; 38
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	80 61       	ori	r24, 0x10	; 16
    14de:	8c 93       	st	X, r24

	return;
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <ADC_voidCallBack>:

void ADC_voidCallBack(void (* Copy_pFunAppFun)(void))
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <ADC_voidCallBack+0x6>
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pFunAppFun != NULL)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	31 f0       	breq	.+12     	; 0x150c <ADC_voidCallBack+0x22>
	{
		ADC_pFunISRFun = Copy_pFunAppFun;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	90 93 ff 01 	sts	0x01FF, r25
    1508:	80 93 fe 01 	sts	0x01FE, r24
	}

	return;
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <ADC_voidEnableInterrupt>:




void ADC_voidEnableInterrupt(void)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= (1<<3);
    151e:	a6 e2       	ldi	r26, 0x26	; 38
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e6 e2       	ldi	r30, 0x26	; 38
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	88 60       	ori	r24, 0x08	; 8
    152a:	8c 93       	st	X, r24

	return;
}
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <__vector_16>:



void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    1532:	1f 92       	push	r1
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	2f 93       	push	r18
    153e:	3f 93       	push	r19
    1540:	4f 93       	push	r20
    1542:	5f 93       	push	r21
    1544:	6f 93       	push	r22
    1546:	7f 93       	push	r23
    1548:	8f 93       	push	r24
    154a:	9f 93       	push	r25
    154c:	af 93       	push	r26
    154e:	bf 93       	push	r27
    1550:	ef 93       	push	r30
    1552:	ff 93       	push	r31
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pFunISRFun != NULL)
    155c:	80 91 fe 01 	lds	r24, 0x01FE
    1560:	90 91 ff 01 	lds	r25, 0x01FF
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	29 f0       	breq	.+10     	; 0x1572 <__vector_16+0x40>
	{
		ADC_pFunISRFun (  );
    1568:	e0 91 fe 01 	lds	r30, 0x01FE
    156c:	f0 91 ff 01 	lds	r31, 0x01FF
    1570:	09 95       	icall
	}
}
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	ff 91       	pop	r31
    1578:	ef 91       	pop	r30
    157a:	bf 91       	pop	r27
    157c:	af 91       	pop	r26
    157e:	9f 91       	pop	r25
    1580:	8f 91       	pop	r24
    1582:	7f 91       	pop	r23
    1584:	6f 91       	pop	r22
    1586:	5f 91       	pop	r21
    1588:	4f 91       	pop	r20
    158a:	3f 91       	pop	r19
    158c:	2f 91       	pop	r18
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	0f 90       	pop	r0
    1594:	1f 90       	pop	r1
    1596:	18 95       	reti

00001598 <LCD_voidWriteNLatch>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include"LCD_priv.h"
#include"LCD_conf.h"
#include<util/delay.h>
void LCD_voidWriteNLatch(u8 Copy_u8Byte){
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	e9 97       	sbiw	r28, 0x39	; 57
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8LOW);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	62 e0       	ldi	r22, 0x02	; 2
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	63 e0       	ldi	r22, 0x03	; 3
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D3_PIN,(Copy_u8Byte>>3)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D2_PIN,(Copy_u8Byte>>2)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D1_PIN,(Copy_u8Byte>>1)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D0_PIN,(Copy_u8Byte>>0)&DIO_u8BIT_MASK);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,(Copy_u8Byte>>7)&DIO_u8BIT_MASK);
    15c2:	89 ad       	ldd	r24, Y+57	; 0x39
    15c4:	98 2f       	mov	r25, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	99 27       	eor	r25, r25
    15ca:	99 1f       	adc	r25, r25
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	67 e0       	ldi	r22, 0x07	; 7
    15d0:	49 2f       	mov	r20, r25
    15d2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D6_PIN,(Copy_u8Byte>>6)&DIO_u8BIT_MASK);
    15d6:	89 ad       	ldd	r24, Y+57	; 0x39
    15d8:	82 95       	swap	r24
    15da:	86 95       	lsr	r24
    15dc:	86 95       	lsr	r24
    15de:	83 70       	andi	r24, 0x03	; 3
    15e0:	98 2f       	mov	r25, r24
    15e2:	91 70       	andi	r25, 0x01	; 1
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	66 e0       	ldi	r22, 0x06	; 6
    15e8:	49 2f       	mov	r20, r25
    15ea:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D5_PIN,(Copy_u8Byte>>5)&DIO_u8BIT_MASK);
    15ee:	89 ad       	ldd	r24, Y+57	; 0x39
    15f0:	82 95       	swap	r24
    15f2:	86 95       	lsr	r24
    15f4:	87 70       	andi	r24, 0x07	; 7
    15f6:	98 2f       	mov	r25, r24
    15f8:	91 70       	andi	r25, 0x01	; 1
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	65 e0       	ldi	r22, 0x05	; 5
    15fe:	49 2f       	mov	r20, r25
    1600:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D4_PIN,(Copy_u8Byte>>4)&DIO_u8BIT_MASK);
    1604:	89 ad       	ldd	r24, Y+57	; 0x39
    1606:	82 95       	swap	r24
    1608:	8f 70       	andi	r24, 0x0F	; 15
    160a:	98 2f       	mov	r25, r24
    160c:	91 70       	andi	r25, 0x01	; 1
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	64 e0       	ldi	r22, 0x04	; 4
    1612:	49 2f       	mov	r20, r25
    1614:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	63 e0       	ldi	r22, 0x03	; 3
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 e8       	ldi	r26, 0x80	; 128
    1628:	bf e3       	ldi	r27, 0x3F	; 63
    162a:	8d ab       	std	Y+53, r24	; 0x35
    162c:	9e ab       	std	Y+54, r25	; 0x36
    162e:	af ab       	std	Y+55, r26	; 0x37
    1630:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1632:	6d a9       	ldd	r22, Y+53	; 0x35
    1634:	7e a9       	ldd	r23, Y+54	; 0x36
    1636:	8f a9       	ldd	r24, Y+55	; 0x37
    1638:	98 ad       	ldd	r25, Y+56	; 0x38
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	4a e7       	ldi	r20, 0x7A	; 122
    1640:	55 e4       	ldi	r21, 0x45	; 69
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	89 ab       	std	Y+49, r24	; 0x31
    164c:	9a ab       	std	Y+50, r25	; 0x32
    164e:	ab ab       	std	Y+51, r26	; 0x33
    1650:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1652:	69 a9       	ldd	r22, Y+49	; 0x31
    1654:	7a a9       	ldd	r23, Y+50	; 0x32
    1656:	8b a9       	ldd	r24, Y+51	; 0x33
    1658:	9c a9       	ldd	r25, Y+52	; 0x34
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	5f e3       	ldi	r21, 0x3F	; 63
    1662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1666:	88 23       	and	r24, r24
    1668:	2c f4       	brge	.+10     	; 0x1674 <LCD_voidWriteNLatch+0xdc>
		__ticks = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	98 ab       	std	Y+48, r25	; 0x30
    1670:	8f a7       	std	Y+47, r24	; 0x2f
    1672:	3f c0       	rjmp	.+126    	; 0x16f2 <LCD_voidWriteNLatch+0x15a>
	else if (__tmp > 65535)
    1674:	69 a9       	ldd	r22, Y+49	; 0x31
    1676:	7a a9       	ldd	r23, Y+50	; 0x32
    1678:	8b a9       	ldd	r24, Y+51	; 0x33
    167a:	9c a9       	ldd	r25, Y+52	; 0x34
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	3f ef       	ldi	r19, 0xFF	; 255
    1680:	4f e7       	ldi	r20, 0x7F	; 127
    1682:	57 e4       	ldi	r21, 0x47	; 71
    1684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1688:	18 16       	cp	r1, r24
    168a:	4c f5       	brge	.+82     	; 0x16de <LCD_voidWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168c:	6d a9       	ldd	r22, Y+53	; 0x35
    168e:	7e a9       	ldd	r23, Y+54	; 0x36
    1690:	8f a9       	ldd	r24, Y+55	; 0x37
    1692:	98 ad       	ldd	r25, Y+56	; 0x38
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e2       	ldi	r20, 0x20	; 32
    169a:	51 e4       	ldi	r21, 0x41	; 65
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	98 ab       	std	Y+48, r25	; 0x30
    16b2:	8f a7       	std	Y+47, r24	; 0x2f
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <LCD_voidWriteNLatch+0x13c>
    16b6:	80 e9       	ldi	r24, 0x90	; 144
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	9e a7       	std	Y+46, r25	; 0x2e
    16bc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16be:	8d a5       	ldd	r24, Y+45	; 0x2d
    16c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <LCD_voidWriteNLatch+0x12a>
    16c6:	9e a7       	std	Y+46, r25	; 0x2e
    16c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    16cc:	98 a9       	ldd	r25, Y+48	; 0x30
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	98 ab       	std	Y+48, r25	; 0x30
    16d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d6:	98 a9       	ldd	r25, Y+48	; 0x30
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	69 f7       	brne	.-38     	; 0x16b6 <LCD_voidWriteNLatch+0x11e>
    16dc:	14 c0       	rjmp	.+40     	; 0x1706 <LCD_voidWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16de:	69 a9       	ldd	r22, Y+49	; 0x31
    16e0:	7a a9       	ldd	r23, Y+50	; 0x32
    16e2:	8b a9       	ldd	r24, Y+51	; 0x33
    16e4:	9c a9       	ldd	r25, Y+52	; 0x34
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	98 ab       	std	Y+48, r25	; 0x30
    16f0:	8f a7       	std	Y+47, r24	; 0x2f
    16f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f4:	98 a9       	ldd	r25, Y+48	; 0x30
    16f6:	9c a7       	std	Y+44, r25	; 0x2c
    16f8:	8b a7       	std	Y+43, r24	; 0x2b
    16fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    16fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <LCD_voidWriteNLatch+0x166>
    1702:	9c a7       	std	Y+44, r25	; 0x2c
    1704:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	63 e0       	ldi	r22, 0x03	; 3
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e4       	ldi	r27, 0x40	; 64
    1718:	8f a3       	std	Y+39, r24	; 0x27
    171a:	98 a7       	std	Y+40, r25	; 0x28
    171c:	a9 a7       	std	Y+41, r26	; 0x29
    171e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1720:	6f a1       	ldd	r22, Y+39	; 0x27
    1722:	78 a5       	ldd	r23, Y+40	; 0x28
    1724:	89 a5       	ldd	r24, Y+41	; 0x29
    1726:	9a a5       	ldd	r25, Y+42	; 0x2a
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	4a e7       	ldi	r20, 0x7A	; 122
    172e:	55 e4       	ldi	r21, 0x45	; 69
    1730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	8b a3       	std	Y+35, r24	; 0x23
    173a:	9c a3       	std	Y+36, r25	; 0x24
    173c:	ad a3       	std	Y+37, r26	; 0x25
    173e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1740:	6b a1       	ldd	r22, Y+35	; 0x23
    1742:	7c a1       	ldd	r23, Y+36	; 0x24
    1744:	8d a1       	ldd	r24, Y+37	; 0x25
    1746:	9e a1       	ldd	r25, Y+38	; 0x26
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e8       	ldi	r20, 0x80	; 128
    174e:	5f e3       	ldi	r21, 0x3F	; 63
    1750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1754:	88 23       	and	r24, r24
    1756:	2c f4       	brge	.+10     	; 0x1762 <LCD_voidWriteNLatch+0x1ca>
		__ticks = 1;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9a a3       	std	Y+34, r25	; 0x22
    175e:	89 a3       	std	Y+33, r24	; 0x21
    1760:	3f c0       	rjmp	.+126    	; 0x17e0 <LCD_voidWriteNLatch+0x248>
	else if (__tmp > 65535)
    1762:	6b a1       	ldd	r22, Y+35	; 0x23
    1764:	7c a1       	ldd	r23, Y+36	; 0x24
    1766:	8d a1       	ldd	r24, Y+37	; 0x25
    1768:	9e a1       	ldd	r25, Y+38	; 0x26
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	3f ef       	ldi	r19, 0xFF	; 255
    176e:	4f e7       	ldi	r20, 0x7F	; 127
    1770:	57 e4       	ldi	r21, 0x47	; 71
    1772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1776:	18 16       	cp	r1, r24
    1778:	4c f5       	brge	.+82     	; 0x17cc <LCD_voidWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177a:	6f a1       	ldd	r22, Y+39	; 0x27
    177c:	78 a5       	ldd	r23, Y+40	; 0x28
    177e:	89 a5       	ldd	r24, Y+41	; 0x29
    1780:	9a a5       	ldd	r25, Y+42	; 0x2a
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e2       	ldi	r20, 0x20	; 32
    1788:	51 e4       	ldi	r21, 0x41	; 65
    178a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	bc 01       	movw	r22, r24
    1794:	cd 01       	movw	r24, r26
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9a a3       	std	Y+34, r25	; 0x22
    17a0:	89 a3       	std	Y+33, r24	; 0x21
    17a2:	0f c0       	rjmp	.+30     	; 0x17c2 <LCD_voidWriteNLatch+0x22a>
    17a4:	80 e9       	ldi	r24, 0x90	; 144
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	98 a3       	std	Y+32, r25	; 0x20
    17aa:	8f 8f       	std	Y+31, r24	; 0x1f
    17ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ae:	98 a1       	ldd	r25, Y+32	; 0x20
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <LCD_voidWriteNLatch+0x218>
    17b4:	98 a3       	std	Y+32, r25	; 0x20
    17b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ba:	9a a1       	ldd	r25, Y+34	; 0x22
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	9a a3       	std	Y+34, r25	; 0x22
    17c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c2:	89 a1       	ldd	r24, Y+33	; 0x21
    17c4:	9a a1       	ldd	r25, Y+34	; 0x22
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	69 f7       	brne	.-38     	; 0x17a4 <LCD_voidWriteNLatch+0x20c>
    17ca:	14 c0       	rjmp	.+40     	; 0x17f4 <LCD_voidWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17cc:	6b a1       	ldd	r22, Y+35	; 0x23
    17ce:	7c a1       	ldd	r23, Y+36	; 0x24
    17d0:	8d a1       	ldd	r24, Y+37	; 0x25
    17d2:	9e a1       	ldd	r25, Y+38	; 0x26
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	9a a3       	std	Y+34, r25	; 0x22
    17de:	89 a3       	std	Y+33, r24	; 0x21
    17e0:	89 a1       	ldd	r24, Y+33	; 0x21
    17e2:	9a a1       	ldd	r25, Y+34	; 0x22
    17e4:	9e 8f       	std	Y+30, r25	; 0x1e
    17e6:	8d 8f       	std	Y+29, r24	; 0x1d
    17e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <LCD_voidWriteNLatch+0x254>
    17f0:	9e 8f       	std	Y+30, r25	; 0x1e
    17f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,((Copy_u8Byte>>3)&1));
    17f4:	89 ad       	ldd	r24, Y+57	; 0x39
    17f6:	86 95       	lsr	r24
    17f8:	86 95       	lsr	r24
    17fa:	86 95       	lsr	r24
    17fc:	98 2f       	mov	r25, r24
    17fe:	91 70       	andi	r25, 0x01	; 1
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	67 e0       	ldi	r22, 0x07	; 7
    1804:	49 2f       	mov	r20, r25
    1806:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,((Copy_u8Byte>>2)&1));
    180a:	89 ad       	ldd	r24, Y+57	; 0x39
    180c:	86 95       	lsr	r24
    180e:	86 95       	lsr	r24
    1810:	98 2f       	mov	r25, r24
    1812:	91 70       	andi	r25, 0x01	; 1
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	66 e0       	ldi	r22, 0x06	; 6
    1818:	49 2f       	mov	r20, r25
    181a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,((Copy_u8Byte>>1)&1));
    181e:	89 ad       	ldd	r24, Y+57	; 0x39
    1820:	86 95       	lsr	r24
    1822:	98 2f       	mov	r25, r24
    1824:	91 70       	andi	r25, 0x01	; 1
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	65 e0       	ldi	r22, 0x05	; 5
    182a:	49 2f       	mov	r20, r25
    182c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,((Copy_u8Byte>>0)&1));
    1830:	89 ad       	ldd	r24, Y+57	; 0x39
    1832:	98 2f       	mov	r25, r24
    1834:	91 70       	andi	r25, 0x01	; 1
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	64 e0       	ldi	r22, 0x04	; 4
    183a:	49 2f       	mov	r20, r25
    183c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	63 e0       	ldi	r22, 0x03	; 3
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e8       	ldi	r26, 0x80	; 128
    1850:	bf e3       	ldi	r27, 0x3F	; 63
    1852:	89 8f       	std	Y+25, r24	; 0x19
    1854:	9a 8f       	std	Y+26, r25	; 0x1a
    1856:	ab 8f       	std	Y+27, r26	; 0x1b
    1858:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185a:	69 8d       	ldd	r22, Y+25	; 0x19
    185c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    185e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1860:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	4a e7       	ldi	r20, 0x7A	; 122
    1868:	55 e4       	ldi	r21, 0x45	; 69
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8d 8b       	std	Y+21, r24	; 0x15
    1874:	9e 8b       	std	Y+22, r25	; 0x16
    1876:	af 8b       	std	Y+23, r26	; 0x17
    1878:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    187a:	6d 89       	ldd	r22, Y+21	; 0x15
    187c:	7e 89       	ldd	r23, Y+22	; 0x16
    187e:	8f 89       	ldd	r24, Y+23	; 0x17
    1880:	98 8d       	ldd	r25, Y+24	; 0x18
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    188e:	88 23       	and	r24, r24
    1890:	2c f4       	brge	.+10     	; 0x189c <LCD_voidWriteNLatch+0x304>
		__ticks = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9c 8b       	std	Y+20, r25	; 0x14
    1898:	8b 8b       	std	Y+19, r24	; 0x13
    189a:	3f c0       	rjmp	.+126    	; 0x191a <LCD_voidWriteNLatch+0x382>
	else if (__tmp > 65535)
    189c:	6d 89       	ldd	r22, Y+21	; 0x15
    189e:	7e 89       	ldd	r23, Y+22	; 0x16
    18a0:	8f 89       	ldd	r24, Y+23	; 0x17
    18a2:	98 8d       	ldd	r25, Y+24	; 0x18
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	3f ef       	ldi	r19, 0xFF	; 255
    18a8:	4f e7       	ldi	r20, 0x7F	; 127
    18aa:	57 e4       	ldi	r21, 0x47	; 71
    18ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b0:	18 16       	cp	r1, r24
    18b2:	4c f5       	brge	.+82     	; 0x1906 <LCD_voidWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b4:	69 8d       	ldd	r22, Y+25	; 0x19
    18b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9c 8b       	std	Y+20, r25	; 0x14
    18da:	8b 8b       	std	Y+19, r24	; 0x13
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <LCD_voidWriteNLatch+0x364>
    18de:	80 e9       	ldi	r24, 0x90	; 144
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	9a 8b       	std	Y+18, r25	; 0x12
    18e4:	89 8b       	std	Y+17, r24	; 0x11
    18e6:	89 89       	ldd	r24, Y+17	; 0x11
    18e8:	9a 89       	ldd	r25, Y+18	; 0x12
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_voidWriteNLatch+0x352>
    18ee:	9a 8b       	std	Y+18, r25	; 0x12
    18f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f2:	8b 89       	ldd	r24, Y+19	; 0x13
    18f4:	9c 89       	ldd	r25, Y+20	; 0x14
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	9c 8b       	std	Y+20, r25	; 0x14
    18fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fc:	8b 89       	ldd	r24, Y+19	; 0x13
    18fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	69 f7       	brne	.-38     	; 0x18de <LCD_voidWriteNLatch+0x346>
    1904:	14 c0       	rjmp	.+40     	; 0x192e <LCD_voidWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1906:	6d 89       	ldd	r22, Y+21	; 0x15
    1908:	7e 89       	ldd	r23, Y+22	; 0x16
    190a:	8f 89       	ldd	r24, Y+23	; 0x17
    190c:	98 8d       	ldd	r25, Y+24	; 0x18
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	98 8b       	std	Y+16, r25	; 0x10
    1920:	8f 87       	std	Y+15, r24	; 0x0f
    1922:	8f 85       	ldd	r24, Y+15	; 0x0f
    1924:	98 89       	ldd	r25, Y+16	; 0x10
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_voidWriteNLatch+0x38e>
    192a:	98 8b       	std	Y+16, r25	; 0x10
    192c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	63 e0       	ldi	r22, 0x03	; 3
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e0       	ldi	r26, 0x00	; 0
    193e:	b0 e4       	ldi	r27, 0x40	; 64
    1940:	8b 87       	std	Y+11, r24	; 0x0b
    1942:	9c 87       	std	Y+12, r25	; 0x0c
    1944:	ad 87       	std	Y+13, r26	; 0x0d
    1946:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1948:	6b 85       	ldd	r22, Y+11	; 0x0b
    194a:	7c 85       	ldd	r23, Y+12	; 0x0c
    194c:	8d 85       	ldd	r24, Y+13	; 0x0d
    194e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a e7       	ldi	r20, 0x7A	; 122
    1956:	55 e4       	ldi	r21, 0x45	; 69
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8f 83       	std	Y+7, r24	; 0x07
    1962:	98 87       	std	Y+8, r25	; 0x08
    1964:	a9 87       	std	Y+9, r26	; 0x09
    1966:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1968:	6f 81       	ldd	r22, Y+7	; 0x07
    196a:	78 85       	ldd	r23, Y+8	; 0x08
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	5f e3       	ldi	r21, 0x3F	; 63
    1978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    197c:	88 23       	and	r24, r24
    197e:	2c f4       	brge	.+10     	; 0x198a <LCD_voidWriteNLatch+0x3f2>
		__ticks = 1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	3f c0       	rjmp	.+126    	; 0x1a08 <LCD_voidWriteNLatch+0x470>
	else if (__tmp > 65535)
    198a:	6f 81       	ldd	r22, Y+7	; 0x07
    198c:	78 85       	ldd	r23, Y+8	; 0x08
    198e:	89 85       	ldd	r24, Y+9	; 0x09
    1990:	9a 85       	ldd	r25, Y+10	; 0x0a
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	3f ef       	ldi	r19, 0xFF	; 255
    1996:	4f e7       	ldi	r20, 0x7F	; 127
    1998:	57 e4       	ldi	r21, 0x47	; 71
    199a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    199e:	18 16       	cp	r1, r24
    19a0:	4c f5       	brge	.+82     	; 0x19f4 <LCD_voidWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <LCD_voidWriteNLatch+0x452>
    19cc:	80 e9       	ldi	r24, 0x90	; 144
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	9c 83       	std	Y+4, r25	; 0x04
    19d2:	8b 83       	std	Y+3, r24	; 0x03
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <LCD_voidWriteNLatch+0x440>
    19dc:	9c 83       	std	Y+4, r25	; 0x04
    19de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	69 f7       	brne	.-38     	; 0x19cc <LCD_voidWriteNLatch+0x434>
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <LCD_voidWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	6f 81       	ldd	r22, Y+7	; 0x07
    19f6:	78 85       	ldd	r23, Y+8	; 0x08
    19f8:	89 85       	ldd	r24, Y+9	; 0x09
    19fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <LCD_voidWriteNLatch+0x47c>
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

					return;
}
    1a1c:	e9 96       	adiw	r28, 0x39	; 57
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <LCD_voidInit>:
void LCD_voidInit(void){
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	6c 97       	sbiw	r28, 0x1c	; 28
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OUTPUT);
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8OUTPUT);
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	62 e0       	ldi	r22, 0x02	; 2
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8OUTPUT);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	63 e0       	ldi	r22, 0x03	; 3
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_u8D7_GROUP,LCD_u8D7_PIN,DIO_u8OUTPUT);
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	67 e0       	ldi	r22, 0x07	; 7
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D6_GROUP,LCD_u8D6_PIN,DIO_u8OUTPUT);
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	66 e0       	ldi	r22, 0x06	; 6
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D5_GROUP,LCD_u8D5_PIN,DIO_u8OUTPUT);
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	65 e0       	ldi	r22, 0x05	; 5
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D4_GROUP,LCD_u8D4_PIN,DIO_u8OUTPUT);
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	64 e0       	ldi	r22, 0x04	; 4
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D0_GROUP,LCD_u8D0_PIN,DIO_u8OUTPUT);

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OW);
	LCD_voidWriteNLatch(0x38);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,0);
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	67 e0       	ldi	r22, 0x07	; 7
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,0);
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	66 e0       	ldi	r22, 0x06	; 6
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,1);
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	65 e0       	ldi	r22, 0x05	; 5
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,0);
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	64 e0       	ldi	r22, 0x04	; 4
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	63 e0       	ldi	r22, 0x03	; 3
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e8       	ldi	r26, 0x80	; 128
    1ac0:	bf e3       	ldi	r27, 0x3F	; 63
    1ac2:	89 8f       	std	Y+25, r24	; 0x19
    1ac4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	69 8d       	ldd	r22, Y+25	; 0x19
    1acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a e7       	ldi	r20, 0x7A	; 122
    1ad8:	55 e4       	ldi	r21, 0x45	; 69
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	8d 8b       	std	Y+21, r24	; 0x15
    1ae4:	9e 8b       	std	Y+22, r25	; 0x16
    1ae6:	af 8b       	std	Y+23, r26	; 0x17
    1ae8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aea:	6d 89       	ldd	r22, Y+21	; 0x15
    1aec:	7e 89       	ldd	r23, Y+22	; 0x16
    1aee:	8f 89       	ldd	r24, Y+23	; 0x17
    1af0:	98 8d       	ldd	r25, Y+24	; 0x18
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <LCD_voidInit+0xde>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <LCD_voidInit+0x15c>
	else if (__tmp > 65535)
    1b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b10:	8f 89       	ldd	r24, Y+23	; 0x17
    1b12:	98 8d       	ldd	r25, Y+24	; 0x18
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <LCD_voidInit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	69 8d       	ldd	r22, Y+25	; 0x19
    1b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9c 8b       	std	Y+20, r25	; 0x14
    1b4a:	8b 8b       	std	Y+19, r24	; 0x13
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <LCD_voidInit+0x13e>
    1b4e:	80 e9       	ldi	r24, 0x90	; 144
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	9a 8b       	std	Y+18, r25	; 0x12
    1b54:	89 8b       	std	Y+17, r24	; 0x11
    1b56:	89 89       	ldd	r24, Y+17	; 0x11
    1b58:	9a 89       	ldd	r25, Y+18	; 0x12
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_voidInit+0x12c>
    1b5e:	9a 8b       	std	Y+18, r25	; 0x12
    1b60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	8b 89       	ldd	r24, Y+19	; 0x13
    1b64:	9c 89       	ldd	r25, Y+20	; 0x14
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	9c 8b       	std	Y+20, r25	; 0x14
    1b6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <LCD_voidInit+0x120>
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <LCD_voidInit+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	6d 89       	ldd	r22, Y+21	; 0x15
    1b78:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9c 8b       	std	Y+20, r25	; 0x14
    1b88:	8b 8b       	std	Y+19, r24	; 0x13
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8e:	98 8b       	std	Y+16, r25	; 0x10
    1b90:	8f 87       	std	Y+15, r24	; 0x0f
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	98 89       	ldd	r25, Y+16	; 0x10
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_voidInit+0x168>
    1b9a:	98 8b       	std	Y+16, r25	; 0x10
    1b9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	63 e0       	ldi	r22, 0x03	; 3
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e4       	ldi	r27, 0x40	; 64
    1bb0:	8b 87       	std	Y+11, r24	; 0x0b
    1bb2:	9c 87       	std	Y+12, r25	; 0x0c
    1bb4:	ad 87       	std	Y+13, r26	; 0x0d
    1bb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a e7       	ldi	r20, 0x7A	; 122
    1bc6:	55 e4       	ldi	r21, 0x45	; 69
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8f 83       	std	Y+7, r24	; 0x07
    1bd2:	98 87       	std	Y+8, r25	; 0x08
    1bd4:	a9 87       	std	Y+9, r26	; 0x09
    1bd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <LCD_voidInit+0x1cc>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <LCD_voidInit+0x24a>
	else if (__tmp > 65535)
    1bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfc:	78 85       	ldd	r23, Y+8	; 0x08
    1bfe:	89 85       	ldd	r24, Y+9	; 0x09
    1c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <LCD_voidInit+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9e 83       	std	Y+6, r25	; 0x06
    1c38:	8d 83       	std	Y+5, r24	; 0x05
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <LCD_voidInit+0x22c>
    1c3c:	80 e9       	ldi	r24, 0x90	; 144
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_voidInit+0x21a>
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <LCD_voidInit+0x20e>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <LCD_voidInit+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_voidInit+0x256>
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>

	      LCD_voidWriteNLatch(0x28);
    1c96:	88 e2       	ldi	r24, 0x28	; 40
    1c98:	0e 94 cc 0a 	call	0x1598	; 0x1598 <LCD_voidWriteNLatch>

#endif
	      //desplay on off

	     	      DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	     	      LCD_voidWriteNLatch(0X0F);
    1ca6:	8f e0       	ldi	r24, 0x0F	; 15
    1ca8:	0e 94 cc 0a 	call	0x1598	; 0x1598 <LCD_voidWriteNLatch>
	     	      //desplay clear
	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	     	    	     	      LCD_voidWriteNLatch(0X01);
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	0e 94 cc 0a 	call	0x1598	; 0x1598 <LCD_voidWriteNLatch>
	     	    	     	      //set mode (increasing or decreasing)and the cursor
	     	    	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	     	    	     	    	      LCD_voidWriteNLatch(0X06);
    1cc6:	86 e0       	ldi	r24, 0x06	; 6
    1cc8:	0e 94 cc 0a 	call	0x1598	; 0x1598 <LCD_voidWriteNLatch>
	      return;
}
    1ccc:	6c 96       	adiw	r28, 0x1c	; 28
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <LCD_voidWriteData>:
void LCD_voidWriteData(u8 Copy_u8Data){
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	41 e0       	ldi	r20, 0x01	; 1
    1cf0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(Copy_u8Data);
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	0e 94 cc 0a 	call	0x1598	; 0x1598 <LCD_voidWriteNLatch>
	return;
}
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <LCD_voidWriteCommand>:
void LCD_voidWriteCommand(u8 Copy_u8Command){
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
			      LCD_voidWriteNLatch(Copy_u8Command);
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <LCD_voidWriteNLatch>
			      return;
}
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <LCD_voidWriteString>:

void LCD_voidWriteString(const char*Copy_String){
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <LCD_voidWriteString+0x6>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	10 c0       	rjmp	.+32     	; 0x1d56 <LCD_voidWriteString+0x30>

	while(*Copy_String!=0){
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	61 e0       	ldi	r22, 0x01	; 1
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
			LCD_voidWriteNLatch(*Copy_String++);
    1d40:	e9 81       	ldd	r30, Y+1	; 0x01
    1d42:	fa 81       	ldd	r31, Y+2	; 0x02
    1d44:	20 81       	ld	r18, Z
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	82 2f       	mov	r24, r18
    1d52:	0e 94 cc 0a 	call	0x1598	; 0x1598 <LCD_voidWriteNLatch>
			      return;
}

void LCD_voidWriteString(const char*Copy_String){

	while(*Copy_String!=0){
    1d56:	e9 81       	ldd	r30, Y+1	; 0x01
    1d58:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5a:	80 81       	ld	r24, Z
    1d5c:	88 23       	and	r24, r24
    1d5e:	59 f7       	brne	.-42     	; 0x1d36 <LCD_voidWriteString+0x10>
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
			LCD_voidWriteNLatch(*Copy_String++);
		}
	return;
}
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <LCD_voidClearScreen>:
void LCD_voidClearScreen(void){
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(0x01);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <LCD_voidWriteNLatch>
	LCD_voidWriteCommand(0x80);           //GO TO POSITION ZER0
    1d82:	80 e8       	ldi	r24, 0x80	; 128
    1d84:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_voidWriteCommand>
	return;
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <LCD_voidShiftDisplayRight>:
void LCD_voidShiftDisplayRight(void){
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x18);
    1d96:	88 e1       	ldi	r24, 0x18	; 24
    1d98:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_voidWriteCommand>
	return ;
}
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <LCD_voidDisplayLeft>:
void LCD_voidDisplayLeft(void){
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x1c);
    1daa:	8c e1       	ldi	r24, 0x1C	; 28
    1dac:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_voidWriteCommand>
	return ;
}
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <LCD_voidSetCgram>:
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <LCD_voidSetCgram+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <LCD_voidSetCgram+0x8>
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	9b 83       	std	Y+3, r25	; 0x03
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	6c 83       	std	Y+4, r22	; 0x04
    1dca:	4d 83       	std	Y+5, r20	; 0x05

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	08 96       	adiw	r24, 0x08	; 8
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_voidWriteCommand>
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <LCD_voidSetCgram+0x4e>
			LCD_voidWriteData(Copy_u8Array[i]);
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	fc 01       	movw	r30, r24
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	80 81       	ld	r24, Z
    1dfa:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidWriteData>
}
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	28 17       	cp	r18, r24
    1e1e:	39 07       	cpc	r19, r25
    1e20:	1c f3       	brlt	.-58     	; 0x1de8 <LCD_voidSetCgram+0x32>
			LCD_voidWriteData(Copy_u8Array[i]);

		}
		return;
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <LCD_voidSetDdram>:
void LCD_voidSetDdram(u8 Copy_u8Position){
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	89 83       	std	Y+1, r24	; 0x01

		LCD_voidWriteCommand(0X80+(8*Copy_u8Position));
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	40 96       	adiw	r24, 0x10	; 16
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_voidWriteCommand>
		return;
}
    1e56:	0f 90       	pop	r0
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <LCD_voidWriteCharacter>:
void LCD_voidWriteCharacter(u8 Copy_u8Char){
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	0f 92       	push	r0
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(Copy_u8Char);
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_voidWriteData>
	return;
}
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <LCD_voidWritInteger>:
void LCD_voidWritInteger(u16 Copy_intNumber){
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	2f 97       	sbiw	r28, 0x0f	; 15
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	99 87       	std	Y+9, r25	; 0x09
    1e8e:	88 87       	std	Y+8, r24	; 0x08
}
for(u8 i=0;i<local_u8Length;i++){
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    1e90:	2d b7       	in	r18, 0x3d	; 61
    1e92:	3e b7       	in	r19, 0x3e	; 62
    1e94:	3f 87       	std	Y+15, r19	; 0x0f
    1e96:	2e 87       	std	Y+14, r18	; 0x0e
void LCD_voidWriteCharacter(u8 Copy_u8Char){

	LCD_voidWriteData(Copy_u8Char);
	return;
}
void LCD_voidWritInteger(u16 Copy_intNumber){
    1e98:	8d b7       	in	r24, 0x3d	; 61
    1e9a:	9e b7       	in	r25, 0x3e	; 62
    1e9c:	9b 87       	std	Y+11, r25	; 0x0b
    1e9e:	8a 87       	std	Y+10, r24	; 0x0a

int local_intTempNum=Copy_intNumber;
    1ea0:	88 85       	ldd	r24, Y+8	; 0x08
    1ea2:	99 85       	ldd	r25, Y+9	; 0x09
    1ea4:	9d 83       	std	Y+5, r25	; 0x05
    1ea6:	8c 83       	std	Y+4, r24	; 0x04
u8 local_u8Length=0;
    1ea8:	1b 82       	std	Y+3, r1	; 0x03
if(Copy_intNumber==0){
    1eaa:	88 85       	ldd	r24, Y+8	; 0x08
    1eac:	99 85       	ldd	r25, Y+9	; 0x09
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	89 f4       	brne	.+34     	; 0x1ed4 <LCD_voidWritInteger+0x5c>
	LCD_voidWriteCharacter('0');
    1eb2:	80 e3       	ldi	r24, 0x30	; 48
    1eb4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_voidWriteCharacter>
    1eb8:	69 c0       	rjmp	.+210    	; 0x1f8c <LCD_voidWritInteger+0x114>
	return;
}
while(local_intTempNum!=0){
	local_intTempNum/=10;
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebe:	2a e0       	ldi	r18, 0x0A	; 10
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	b9 01       	movw	r22, r18
    1ec4:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__divmodhi4>
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9d 83       	std	Y+5, r25	; 0x05
    1ecc:	8c 83       	std	Y+4, r24	; 0x04
	local_u8Length++;
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	8f 5f       	subi	r24, 0xFF	; 255
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
u8 local_u8Length=0;
if(Copy_intNumber==0){
	LCD_voidWriteCharacter('0');
	return;
}
while(local_intTempNum!=0){
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	79 f7       	brne	.-34     	; 0x1eba <LCD_voidWritInteger+0x42>
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	2d b7       	in	r18, 0x3d	; 61
    1ee4:	3e b7       	in	r19, 0x3e	; 62
    1ee6:	28 1b       	sub	r18, r24
    1ee8:	39 0b       	sbc	r19, r25
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	3e bf       	out	0x3e, r19	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	2d bf       	out	0x3d, r18	; 61
    1ef4:	8d b7       	in	r24, 0x3d	; 61
    1ef6:	9e b7       	in	r25, 0x3e	; 62
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	9d 87       	std	Y+13, r25	; 0x0d
    1efc:	8c 87       	std	Y+12, r24	; 0x0c
    1efe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f00:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f02:	00 96       	adiw	r24, 0x00	; 0
    1f04:	9d 87       	std	Y+13, r25	; 0x0d
    1f06:	8c 87       	std	Y+12, r24	; 0x0c
    1f08:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f0a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f0c:	3f 83       	std	Y+7, r19	; 0x07
    1f0e:	2e 83       	std	Y+6, r18	; 0x06
local_intTempNum=Copy_intNumber;
    1f10:	88 85       	ldd	r24, Y+8	; 0x08
    1f12:	99 85       	ldd	r25, Y+9	; 0x09
    1f14:	9d 83       	std	Y+5, r25	; 0x05
    1f16:	8c 83       	std	Y+4, r24	; 0x04
for(u8 i=local_u8Length;i>0;i--){
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	8a 83       	std	Y+2, r24	; 0x02
    1f1c:	20 c0       	rjmp	.+64     	; 0x1f5e <LCD_voidWritInteger+0xe6>
	array[i-1]=local_intTempNum%10+'0';
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	88 2f       	mov	r24, r24
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	fc 01       	movw	r30, r24
    1f26:	31 97       	sbiw	r30, 0x01	; 1
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	2a e0       	ldi	r18, 0x0A	; 10
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	b9 01       	movw	r22, r18
    1f32:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__divmodhi4>
    1f36:	28 2f       	mov	r18, r24
    1f38:	20 5d       	subi	r18, 0xD0	; 208
    1f3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3e:	e8 0f       	add	r30, r24
    1f40:	f9 1f       	adc	r31, r25
    1f42:	20 83       	st	Z, r18
	local_intTempNum/=10;
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	2a e0       	ldi	r18, 0x0A	; 10
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	b9 01       	movw	r22, r18
    1f4e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__divmodhi4>
    1f52:	cb 01       	movw	r24, r22
    1f54:	9d 83       	std	Y+5, r25	; 0x05
    1f56:	8c 83       	std	Y+4, r24	; 0x04
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	81 50       	subi	r24, 0x01	; 1
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	88 23       	and	r24, r24
    1f62:	e9 f6       	brne	.-70     	; 0x1f1e <LCD_voidWritInteger+0xa6>
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    1f64:	19 82       	std	Y+1, r1	; 0x01
    1f66:	0e c0       	rjmp	.+28     	; 0x1f84 <LCD_voidWritInteger+0x10c>
	LCD_voidWriteCharacter(array[i]);
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f70:	9f 81       	ldd	r25, Y+7	; 0x07
    1f72:	fc 01       	movw	r30, r24
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	80 81       	ld	r24, Z
    1f7a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_voidWriteCharacter>
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	99 81       	ldd	r25, Y+1	; 0x01
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	98 17       	cp	r25, r24
    1f8a:	70 f3       	brcs	.-36     	; 0x1f68 <LCD_voidWritInteger+0xf0>
    1f8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	9e bf       	out	0x3e, r25	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	8d bf       	out	0x3d, r24	; 61
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    1f9a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f9c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	3e bf       	out	0x3e, r19	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	2d bf       	out	0x3d, r18	; 61
    1fa8:	2f 96       	adiw	r28, 0x0f	; 15
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <LCD_voidWriteFloat>:
void LCD_voidWriteFloat(f32 Copy_floatNumber){
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	2c 97       	sbiw	r28, 0x0c	; 12
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	69 87       	std	Y+9, r22	; 0x09
    1fd0:	7a 87       	std	Y+10, r23	; 0x0a
    1fd2:	8b 87       	std	Y+11, r24	; 0x0b
    1fd4:	9c 87       	std	Y+12, r25	; 0x0c

	u32 Local_u32int=(u32)(Copy_floatNumber);
    1fd6:	69 85       	ldd	r22, Y+9	; 0x09
    1fd8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	af 83       	std	Y+7, r26	; 0x07
    1fec:	b8 87       	std	Y+8, r27	; 0x08
	LCD_voidWritInteger(Local_u32int);
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_voidWritInteger>
	LCD_voidWriteCharacter('.');
    1ff6:	8e e2       	ldi	r24, 0x2E	; 46
    1ff8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_voidWriteCharacter>
	u32 Local_u32float=(u32)(1000.0*(Copy_floatNumber-(u32)(Local_u32int)));
    1ffc:	6d 81       	ldd	r22, Y+5	; 0x05
    1ffe:	7e 81       	ldd	r23, Y+6	; 0x06
    2000:	8f 81       	ldd	r24, Y+7	; 0x07
    2002:	98 85       	ldd	r25, Y+8	; 0x08
    2004:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2008:	9b 01       	movw	r18, r22
    200a:	ac 01       	movw	r20, r24
    200c:	69 85       	ldd	r22, Y+9	; 0x09
    200e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2010:	8b 85       	ldd	r24, Y+11	; 0x0b
    2012:	9c 85       	ldd	r25, Y+12	; 0x0c
    2014:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4a e7       	ldi	r20, 0x7A	; 122
    2026:	54 e4       	ldi	r21, 0x44	; 68
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	ab 83       	std	Y+3, r26	; 0x03
    2042:	bc 83       	std	Y+4, r27	; 0x04
    LCD_voidWritInteger(Local_u32float);
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_voidWritInteger>

	return;
}
    204c:	2c 96       	adiw	r28, 0x0c	; 12
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <LCD_voidGoToPosition>:
void LCD_voidGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col){
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <LCD_voidGoToPosition+0x6>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row<=1&&Copy_u8Col<=16){
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	82 30       	cpi	r24, 0x02	; 2
    2070:	90 f4       	brcc	.+36     	; 0x2096 <LCD_voidGoToPosition+0x38>
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	81 31       	cpi	r24, 0x11	; 17
    2076:	78 f4       	brcc	.+30     	; 0x2096 <LCD_voidGoToPosition+0x38>
		if(Copy_u8Row==0){
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	88 23       	and	r24, r24
    207c:	29 f4       	brne	.+10     	; 0x2088 <LCD_voidGoToPosition+0x2a>
			LCD_voidWriteCommand((0x80+Copy_u8Col));
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	80 58       	subi	r24, 0x80	; 128
    2082:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_voidWriteCommand>
    2086:	07 c0       	rjmp	.+14     	; 0x2096 <LCD_voidGoToPosition+0x38>
		}
		else if(Copy_u8Row==1){
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	21 f4       	brne	.+8      	; 0x2096 <LCD_voidGoToPosition+0x38>
			LCD_voidWriteCommand((0xC0+Copy_u8Col));
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	80 54       	subi	r24, 0x40	; 64
    2092:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <LCD_voidWriteCommand>
		}
	}

		return;

}
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <FLEX_SENSOR_voidInit>:
#include "../../MCAL/ADC/ADC_int.h"
#include "../../HAL/LCD/LCD_int.h"
#include "FLEX_SENSOR_priv.h"
#include "FLEX_SENSOR_conf.h"
u16 read;
void FLEX_SENSOR_voidInit(void){
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
	    ADC_voidInit();
    20a8:	0e 94 40 09 	call	0x1280	; 0x1280 <ADC_voidInit>
		ADC_voidStartConversion();
    20ac:	0e 94 a8 09 	call	0x1350	; 0x1350 <ADC_voidStartConversion>
		ADC_voidPollingRead(&read);
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	92 e0       	ldi	r25, 0x02	; 2
    20b4:	0e 94 37 0a 	call	0x146e	; 0x146e <ADC_voidPollingRead>
}
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <FLEX_SENSOR_voidReadFinger>:
u16 FLEX_SENSOR_voidReadFinger(u8 Copy_u8Finger){
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidSelectChannel(Copy_u8Finger);
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	0e 94 8c 09 	call	0x1318	; 0x1318 <ADC_voidSelectChannel>
	ADC_voidStartConversion();
    20d0:	0e 94 a8 09 	call	0x1350	; 0x1350 <ADC_voidStartConversion>
	ADC_voidPollingRead(&read);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	92 e0       	ldi	r25, 0x02	; 2
    20d8:	0e 94 37 0a 	call	0x146e	; 0x146e <ADC_voidPollingRead>
	read=(read*500ul)/1024;
    20dc:	80 91 00 02 	lds	r24, 0x0200
    20e0:	90 91 01 02 	lds	r25, 0x0201
    20e4:	cc 01       	movw	r24, r24
    20e6:	a0 e0       	ldi	r26, 0x00	; 0
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	24 ef       	ldi	r18, 0xF4	; 244
    20ec:	31 e0       	ldi	r19, 0x01	; 1
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 26 13 	call	0x264c	; 0x264c <__mulsi3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	07 2e       	mov	r0, r23
    2100:	7a e0       	ldi	r23, 0x0A	; 10
    2102:	b6 95       	lsr	r27
    2104:	a7 95       	ror	r26
    2106:	97 95       	ror	r25
    2108:	87 95       	ror	r24
    210a:	7a 95       	dec	r23
    210c:	d1 f7       	brne	.-12     	; 0x2102 <FLEX_SENSOR_voidReadFinger+0x44>
    210e:	70 2d       	mov	r23, r0
    2110:	90 93 01 02 	sts	0x0201, r25
    2114:	80 93 00 02 	sts	0x0200, r24
	read/=100;
    2118:	80 91 00 02 	lds	r24, 0x0200
    211c:	90 91 01 02 	lds	r25, 0x0201
    2120:	24 e6       	ldi	r18, 0x64	; 100
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	b9 01       	movw	r22, r18
    2126:	0e 94 45 13 	call	0x268a	; 0x268a <__udivmodhi4>
    212a:	cb 01       	movw	r24, r22
    212c:	90 93 01 02 	sts	0x0201, r25
    2130:	80 93 00 02 	sts	0x0200, r24
	return read;
    2134:	80 91 00 02 	lds	r24, 0x0200
    2138:	90 91 01 02 	lds	r25, 0x0201
}
    213c:	0f 90       	pop	r0
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <Translate_Results>:
void Translate_Results(u16*Copy_u8Results){
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	00 d0       	rcall	.+0      	; 0x214a <Translate_Results+0x6>
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8Results[0] == 4) && (Copy_u8Results[1] == 4) &&(Copy_u8Results[2] == 2)&&(Copy_u8Results[3] == 2) &&(Copy_u8Results[4] == 4)) {
    2152:	e9 81       	ldd	r30, Y+1	; 0x01
    2154:	fa 81       	ldd	r31, Y+2	; 0x02
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	84 30       	cpi	r24, 0x04	; 4
    215c:	91 05       	cpc	r25, r1
    215e:	49 f5       	brne	.+82     	; 0x21b2 <Translate_Results+0x6e>
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	fc 01       	movw	r30, r24
    2166:	32 96       	adiw	r30, 0x02	; 2
    2168:	80 81       	ld	r24, Z
    216a:	91 81       	ldd	r25, Z+1	; 0x01
    216c:	84 30       	cpi	r24, 0x04	; 4
    216e:	91 05       	cpc	r25, r1
    2170:	01 f5       	brne	.+64     	; 0x21b2 <Translate_Results+0x6e>
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	fc 01       	movw	r30, r24
    2178:	34 96       	adiw	r30, 0x04	; 4
    217a:	80 81       	ld	r24, Z
    217c:	91 81       	ldd	r25, Z+1	; 0x01
    217e:	82 30       	cpi	r24, 0x02	; 2
    2180:	91 05       	cpc	r25, r1
    2182:	b9 f4       	brne	.+46     	; 0x21b2 <Translate_Results+0x6e>
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	fc 01       	movw	r30, r24
    218a:	36 96       	adiw	r30, 0x06	; 6
    218c:	80 81       	ld	r24, Z
    218e:	91 81       	ldd	r25, Z+1	; 0x01
    2190:	82 30       	cpi	r24, 0x02	; 2
    2192:	91 05       	cpc	r25, r1
    2194:	71 f4       	brne	.+28     	; 0x21b2 <Translate_Results+0x6e>
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	fc 01       	movw	r30, r24
    219c:	38 96       	adiw	r30, 0x08	; 8
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	84 30       	cpi	r24, 0x04	; 4
    21a4:	91 05       	cpc	r25, r1
    21a6:	29 f4       	brne	.+10     	; 0x21b2 <Translate_Results+0x6e>
                 LCD_voidWriteString("  I LOVE YOU ");
    21a8:	80 e6       	ldi	r24, 0x60	; 96
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidWriteString>
    21b0:	2c c1       	rjmp	.+600    	; 0x240a <Translate_Results+0x2c6>
	    } else if ((Copy_u8Results[0] == 2) && (Copy_u8Results[1] == 4) &&(Copy_u8Results[2] == 2)&&(Copy_u8Results[3] == 2) &&(Copy_u8Results[4] == 2)) {
    21b2:	e9 81       	ldd	r30, Y+1	; 0x01
    21b4:	fa 81       	ldd	r31, Y+2	; 0x02
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	91 05       	cpc	r25, r1
    21be:	49 f5       	brne	.+82     	; 0x2212 <Translate_Results+0xce>
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	9a 81       	ldd	r25, Y+2	; 0x02
    21c4:	fc 01       	movw	r30, r24
    21c6:	32 96       	adiw	r30, 0x02	; 2
    21c8:	80 81       	ld	r24, Z
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	84 30       	cpi	r24, 0x04	; 4
    21ce:	91 05       	cpc	r25, r1
    21d0:	01 f5       	brne	.+64     	; 0x2212 <Translate_Results+0xce>
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	9a 81       	ldd	r25, Y+2	; 0x02
    21d6:	fc 01       	movw	r30, r24
    21d8:	34 96       	adiw	r30, 0x04	; 4
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	82 30       	cpi	r24, 0x02	; 2
    21e0:	91 05       	cpc	r25, r1
    21e2:	b9 f4       	brne	.+46     	; 0x2212 <Translate_Results+0xce>
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	9a 81       	ldd	r25, Y+2	; 0x02
    21e8:	fc 01       	movw	r30, r24
    21ea:	36 96       	adiw	r30, 0x06	; 6
    21ec:	80 81       	ld	r24, Z
    21ee:	91 81       	ldd	r25, Z+1	; 0x01
    21f0:	82 30       	cpi	r24, 0x02	; 2
    21f2:	91 05       	cpc	r25, r1
    21f4:	71 f4       	brne	.+28     	; 0x2212 <Translate_Results+0xce>
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	fc 01       	movw	r30, r24
    21fc:	38 96       	adiw	r30, 0x08	; 8
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	91 05       	cpc	r25, r1
    2206:	29 f4       	brne	.+10     	; 0x2212 <Translate_Results+0xce>
                 LCD_voidWriteString("        YOU       ");
    2208:	8e e6       	ldi	r24, 0x6E	; 110
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidWriteString>
    2210:	fc c0       	rjmp	.+504    	; 0x240a <Translate_Results+0x2c6>

	    } else if ((Copy_u8Results[0] == 4) && (Copy_u8Results[1] == 2) &&(Copy_u8Results[2] == 2)&&(Copy_u8Results[3] == 2) &&(Copy_u8Results[4] == 2)) {
    2212:	e9 81       	ldd	r30, Y+1	; 0x01
    2214:	fa 81       	ldd	r31, Y+2	; 0x02
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	84 30       	cpi	r24, 0x04	; 4
    221c:	91 05       	cpc	r25, r1
    221e:	49 f5       	brne	.+82     	; 0x2272 <Translate_Results+0x12e>
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	fc 01       	movw	r30, r24
    2226:	32 96       	adiw	r30, 0x02	; 2
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	91 05       	cpc	r25, r1
    2230:	01 f5       	brne	.+64     	; 0x2272 <Translate_Results+0x12e>
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	fc 01       	movw	r30, r24
    2238:	34 96       	adiw	r30, 0x04	; 4
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	91 05       	cpc	r25, r1
    2242:	b9 f4       	brne	.+46     	; 0x2272 <Translate_Results+0x12e>
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	fc 01       	movw	r30, r24
    224a:	36 96       	adiw	r30, 0x06	; 6
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	82 30       	cpi	r24, 0x02	; 2
    2252:	91 05       	cpc	r25, r1
    2254:	71 f4       	brne	.+28     	; 0x2272 <Translate_Results+0x12e>
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	fc 01       	movw	r30, r24
    225c:	38 96       	adiw	r30, 0x08	; 8
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	82 30       	cpi	r24, 0x02	; 2
    2264:	91 05       	cpc	r25, r1
    2266:	29 f4       	brne	.+10     	; 0x2272 <Translate_Results+0x12e>
                 LCD_voidWriteString("    GOOD JOB    ");
    2268:	81 e8       	ldi	r24, 0x81	; 129
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidWriteString>
    2270:	cc c0       	rjmp	.+408    	; 0x240a <Translate_Results+0x2c6>

	    } else if ((Copy_u8Results[0] == 2) && (Copy_u8Results[1] == 4) &&(Copy_u8Results[2] == 2)&&(Copy_u8Results[3] == 2) &&(Copy_u8Results[4] == 4)) {
    2272:	e9 81       	ldd	r30, Y+1	; 0x01
    2274:	fa 81       	ldd	r31, Y+2	; 0x02
    2276:	80 81       	ld	r24, Z
    2278:	91 81       	ldd	r25, Z+1	; 0x01
    227a:	82 30       	cpi	r24, 0x02	; 2
    227c:	91 05       	cpc	r25, r1
    227e:	49 f5       	brne	.+82     	; 0x22d2 <Translate_Results+0x18e>
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	fc 01       	movw	r30, r24
    2286:	32 96       	adiw	r30, 0x02	; 2
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	84 30       	cpi	r24, 0x04	; 4
    228e:	91 05       	cpc	r25, r1
    2290:	01 f5       	brne	.+64     	; 0x22d2 <Translate_Results+0x18e>
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	fc 01       	movw	r30, r24
    2298:	34 96       	adiw	r30, 0x04	; 4
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	91 05       	cpc	r25, r1
    22a2:	b9 f4       	brne	.+46     	; 0x22d2 <Translate_Results+0x18e>
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	fc 01       	movw	r30, r24
    22aa:	36 96       	adiw	r30, 0x06	; 6
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01
    22b0:	82 30       	cpi	r24, 0x02	; 2
    22b2:	91 05       	cpc	r25, r1
    22b4:	71 f4       	brne	.+28     	; 0x22d2 <Translate_Results+0x18e>
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	fc 01       	movw	r30, r24
    22bc:	38 96       	adiw	r30, 0x08	; 8
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	84 30       	cpi	r24, 0x04	; 4
    22c4:	91 05       	cpc	r25, r1
    22c6:	29 f4       	brne	.+10     	; 0x22d2 <Translate_Results+0x18e>
                 LCD_voidWriteString("THIS IS TERRIBLE");
    22c8:	82 e9       	ldi	r24, 0x92	; 146
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidWriteString>
    22d0:	9c c0       	rjmp	.+312    	; 0x240a <Translate_Results+0x2c6>

	    } else if ((Copy_u8Results[0] == 4) && (Copy_u8Results[1] == 4) &&(Copy_u8Results[2] == 4)&&(Copy_u8Results[3] == 4) &&(Copy_u8Results[4] == 4)) {
    22d2:	e9 81       	ldd	r30, Y+1	; 0x01
    22d4:	fa 81       	ldd	r31, Y+2	; 0x02
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	91 05       	cpc	r25, r1
    22de:	89 f5       	brne	.+98     	; 0x2342 <Translate_Results+0x1fe>
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	9a 81       	ldd	r25, Y+2	; 0x02
    22e4:	fc 01       	movw	r30, r24
    22e6:	32 96       	adiw	r30, 0x02	; 2
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	84 30       	cpi	r24, 0x04	; 4
    22ee:	91 05       	cpc	r25, r1
    22f0:	41 f5       	brne	.+80     	; 0x2342 <Translate_Results+0x1fe>
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	9a 81       	ldd	r25, Y+2	; 0x02
    22f6:	fc 01       	movw	r30, r24
    22f8:	34 96       	adiw	r30, 0x04	; 4
    22fa:	80 81       	ld	r24, Z
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	84 30       	cpi	r24, 0x04	; 4
    2300:	91 05       	cpc	r25, r1
    2302:	f9 f4       	brne	.+62     	; 0x2342 <Translate_Results+0x1fe>
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	fc 01       	movw	r30, r24
    230a:	36 96       	adiw	r30, 0x06	; 6
    230c:	80 81       	ld	r24, Z
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	84 30       	cpi	r24, 0x04	; 4
    2312:	91 05       	cpc	r25, r1
    2314:	b1 f4       	brne	.+44     	; 0x2342 <Translate_Results+0x1fe>
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	fc 01       	movw	r30, r24
    231c:	38 96       	adiw	r30, 0x08	; 8
    231e:	80 81       	ld	r24, Z
    2320:	91 81       	ldd	r25, Z+1	; 0x01
    2322:	84 30       	cpi	r24, 0x04	; 4
    2324:	91 05       	cpc	r25, r1
    2326:	69 f4       	brne	.+26     	; 0x2342 <Translate_Results+0x1fe>
                 LCD_voidWriteString("    WISH YOU ");
    2328:	83 ea       	ldi	r24, 0xA3	; 163
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidWriteString>
                 LCD_voidGoToPosition(1,0);
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_voidGoToPosition>
                 LCD_voidWriteString("  A HAPPY LIFE  ");
    2338:	81 eb       	ldi	r24, 0xB1	; 177
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidWriteString>
    2340:	64 c0       	rjmp	.+200    	; 0x240a <Translate_Results+0x2c6>

	    } else if ((Copy_u8Results[0] == 2) && (Copy_u8Results[1] == 3) &&(Copy_u8Results[2] == 3)&&(Copy_u8Results[3] == 2) &&(Copy_u8Results[4] == 2)) {
    2342:	e9 81       	ldd	r30, Y+1	; 0x01
    2344:	fa 81       	ldd	r31, Y+2	; 0x02
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	82 30       	cpi	r24, 0x02	; 2
    234c:	91 05       	cpc	r25, r1
    234e:	49 f5       	brne	.+82     	; 0x23a2 <Translate_Results+0x25e>
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	fc 01       	movw	r30, r24
    2356:	32 96       	adiw	r30, 0x02	; 2
    2358:	80 81       	ld	r24, Z
    235a:	91 81       	ldd	r25, Z+1	; 0x01
    235c:	83 30       	cpi	r24, 0x03	; 3
    235e:	91 05       	cpc	r25, r1
    2360:	01 f5       	brne	.+64     	; 0x23a2 <Translate_Results+0x25e>
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	fc 01       	movw	r30, r24
    2368:	34 96       	adiw	r30, 0x04	; 4
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	83 30       	cpi	r24, 0x03	; 3
    2370:	91 05       	cpc	r25, r1
    2372:	b9 f4       	brne	.+46     	; 0x23a2 <Translate_Results+0x25e>
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	9a 81       	ldd	r25, Y+2	; 0x02
    2378:	fc 01       	movw	r30, r24
    237a:	36 96       	adiw	r30, 0x06	; 6
    237c:	80 81       	ld	r24, Z
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	91 05       	cpc	r25, r1
    2384:	71 f4       	brne	.+28     	; 0x23a2 <Translate_Results+0x25e>
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	fc 01       	movw	r30, r24
    238c:	38 96       	adiw	r30, 0x08	; 8
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	82 30       	cpi	r24, 0x02	; 2
    2394:	91 05       	cpc	r25, r1
    2396:	29 f4       	brne	.+10     	; 0x23a2 <Translate_Results+0x25e>
                 LCD_voidWriteString("I'M WATCHING YOU");
    2398:	82 ec       	ldi	r24, 0xC2	; 194
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidWriteString>
    23a0:	34 c0       	rjmp	.+104    	; 0x240a <Translate_Results+0x2c6>

	    } else if ((Copy_u8Results[0] == 4) && (Copy_u8Results[1] == 3) &&(Copy_u8Results[2] == 4)&&(Copy_u8Results[3] == 2) &&(Copy_u8Results[4] == 4)) {
    23a2:	e9 81       	ldd	r30, Y+1	; 0x01
    23a4:	fa 81       	ldd	r31, Y+2	; 0x02
    23a6:	80 81       	ld	r24, Z
    23a8:	91 81       	ldd	r25, Z+1	; 0x01
    23aa:	84 30       	cpi	r24, 0x04	; 4
    23ac:	91 05       	cpc	r25, r1
    23ae:	49 f5       	brne	.+82     	; 0x2402 <Translate_Results+0x2be>
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	fc 01       	movw	r30, r24
    23b6:	32 96       	adiw	r30, 0x02	; 2
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	83 30       	cpi	r24, 0x03	; 3
    23be:	91 05       	cpc	r25, r1
    23c0:	01 f5       	brne	.+64     	; 0x2402 <Translate_Results+0x2be>
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	fc 01       	movw	r30, r24
    23c8:	34 96       	adiw	r30, 0x04	; 4
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	84 30       	cpi	r24, 0x04	; 4
    23d0:	91 05       	cpc	r25, r1
    23d2:	b9 f4       	brne	.+46     	; 0x2402 <Translate_Results+0x2be>
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	9a 81       	ldd	r25, Y+2	; 0x02
    23d8:	fc 01       	movw	r30, r24
    23da:	36 96       	adiw	r30, 0x06	; 6
    23dc:	80 81       	ld	r24, Z
    23de:	91 81       	ldd	r25, Z+1	; 0x01
    23e0:	82 30       	cpi	r24, 0x02	; 2
    23e2:	91 05       	cpc	r25, r1
    23e4:	71 f4       	brne	.+28     	; 0x2402 <Translate_Results+0x2be>
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	fc 01       	movw	r30, r24
    23ec:	38 96       	adiw	r30, 0x08	; 8
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	84 30       	cpi	r24, 0x04	; 4
    23f4:	91 05       	cpc	r25, r1
    23f6:	29 f4       	brne	.+10     	; 0x2402 <Translate_Results+0x2be>
                 LCD_voidWriteString("I REALLY LOVE YOU");
    23f8:	83 ed       	ldi	r24, 0xD3	; 211
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidWriteString>
    2400:	04 c0       	rjmp	.+8      	; 0x240a <Translate_Results+0x2c6>
	    } else {

                 LCD_voidWriteString("CAN'T FIND WORD");
    2402:	85 ee       	ldi	r24, 0xE5	; 229
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidWriteString>
	    }
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <main>:
#include "../HAL/FLEX_SENSOR/FLEX_SENSOR_int.h"

#include<util/delay.h>

u16 FINGERS[5];
int main(){
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	6c 97       	sbiw	r28, 0x1c	; 28
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    LCD_voidInit();
    2428:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_voidInit>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	aa e7       	ldi	r26, 0x7A	; 122
    2432:	b4 e4       	ldi	r27, 0x44	; 68
    2434:	89 8f       	std	Y+25, r24	; 0x19
    2436:	9a 8f       	std	Y+26, r25	; 0x1a
    2438:	ab 8f       	std	Y+27, r26	; 0x1b
    243a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243c:	69 8d       	ldd	r22, Y+25	; 0x19
    243e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	4a e7       	ldi	r20, 0x7A	; 122
    244a:	55 e4       	ldi	r21, 0x45	; 69
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	8d 8b       	std	Y+21, r24	; 0x15
    2456:	9e 8b       	std	Y+22, r25	; 0x16
    2458:	af 8b       	std	Y+23, r26	; 0x17
    245a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    245c:	6d 89       	ldd	r22, Y+21	; 0x15
    245e:	7e 89       	ldd	r23, Y+22	; 0x16
    2460:	8f 89       	ldd	r24, Y+23	; 0x17
    2462:	98 8d       	ldd	r25, Y+24	; 0x18
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e8       	ldi	r20, 0x80	; 128
    246a:	5f e3       	ldi	r21, 0x3F	; 63
    246c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2470:	88 23       	and	r24, r24
    2472:	2c f4       	brge	.+10     	; 0x247e <main+0x6a>
		__ticks = 1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
    247c:	3f c0       	rjmp	.+126    	; 0x24fc <main+0xe8>
	else if (__tmp > 65535)
    247e:	6d 89       	ldd	r22, Y+21	; 0x15
    2480:	7e 89       	ldd	r23, Y+22	; 0x16
    2482:	8f 89       	ldd	r24, Y+23	; 0x17
    2484:	98 8d       	ldd	r25, Y+24	; 0x18
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	3f ef       	ldi	r19, 0xFF	; 255
    248a:	4f e7       	ldi	r20, 0x7F	; 127
    248c:	57 e4       	ldi	r21, 0x47	; 71
    248e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2492:	18 16       	cp	r1, r24
    2494:	4c f5       	brge	.+82     	; 0x24e8 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2496:	69 8d       	ldd	r22, Y+25	; 0x19
    2498:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e2       	ldi	r20, 0x20	; 32
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	9c 8b       	std	Y+20, r25	; 0x14
    24bc:	8b 8b       	std	Y+19, r24	; 0x13
    24be:	0f c0       	rjmp	.+30     	; 0x24de <main+0xca>
    24c0:	80 e9       	ldi	r24, 0x90	; 144
    24c2:	91 e0       	ldi	r25, 0x01	; 1
    24c4:	9a 8b       	std	Y+18, r25	; 0x12
    24c6:	89 8b       	std	Y+17, r24	; 0x11
    24c8:	89 89       	ldd	r24, Y+17	; 0x11
    24ca:	9a 89       	ldd	r25, Y+18	; 0x12
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <main+0xb8>
    24d0:	9a 8b       	std	Y+18, r25	; 0x12
    24d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	8b 89       	ldd	r24, Y+19	; 0x13
    24d6:	9c 89       	ldd	r25, Y+20	; 0x14
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	9c 8b       	std	Y+20, r25	; 0x14
    24dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	9c 89       	ldd	r25, Y+20	; 0x14
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	69 f7       	brne	.-38     	; 0x24c0 <main+0xac>
    24e6:	14 c0       	rjmp	.+40     	; 0x2510 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ea:	7e 89       	ldd	r23, Y+22	; 0x16
    24ec:	8f 89       	ldd	r24, Y+23	; 0x17
    24ee:	98 8d       	ldd	r25, Y+24	; 0x18
    24f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9c 8b       	std	Y+20, r25	; 0x14
    24fa:	8b 8b       	std	Y+19, r24	; 0x13
    24fc:	8b 89       	ldd	r24, Y+19	; 0x13
    24fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2500:	98 8b       	std	Y+16, r25	; 0x10
    2502:	8f 87       	std	Y+15, r24	; 0x0f
    2504:	8f 85       	ldd	r24, Y+15	; 0x0f
    2506:	98 89       	ldd	r25, Y+16	; 0x10
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <main+0xf4>
    250c:	98 8b       	std	Y+16, r25	; 0x10
    250e:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(1000);

    FLEX_SENSOR_voidInit();
    2510:	0e 94 50 10 	call	0x20a0	; 0x20a0 <FLEX_SENSOR_voidInit>
    while(1){
    	FINGERS[0]=FLEX_SENSOR_voidReadFinger(0);    // THUMP
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	0e 94 5f 10 	call	0x20be	; 0x20be <FLEX_SENSOR_voidReadFinger>
    251a:	90 93 03 02 	sts	0x0203, r25
    251e:	80 93 02 02 	sts	0x0202, r24
    	FINGERS[1]=FLEX_SENSOR_voidReadFinger(1);    //INDEX
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	0e 94 5f 10 	call	0x20be	; 0x20be <FLEX_SENSOR_voidReadFinger>
    2528:	90 93 05 02 	sts	0x0205, r25
    252c:	80 93 04 02 	sts	0x0204, r24
    	FINGERS[2]=FLEX_SENSOR_voidReadFinger(2);    //MIDDLE
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	0e 94 5f 10 	call	0x20be	; 0x20be <FLEX_SENSOR_voidReadFinger>
    2536:	90 93 07 02 	sts	0x0207, r25
    253a:	80 93 06 02 	sts	0x0206, r24
    	FINGERS[3]=FLEX_SENSOR_voidReadFinger(3);    //RING
    253e:	83 e0       	ldi	r24, 0x03	; 3
    2540:	0e 94 5f 10 	call	0x20be	; 0x20be <FLEX_SENSOR_voidReadFinger>
    2544:	90 93 09 02 	sts	0x0209, r25
    2548:	80 93 08 02 	sts	0x0208, r24
    	FINGERS[4]=FLEX_SENSOR_voidReadFinger(4);    //PINKY
    254c:	84 e0       	ldi	r24, 0x04	; 4
    254e:	0e 94 5f 10 	call	0x20be	; 0x20be <FLEX_SENSOR_voidReadFinger>
    2552:	90 93 0b 02 	sts	0x020B, r25
    2556:	80 93 0a 02 	sts	0x020A, r24


    LCD_voidClearScreen();
    255a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_voidClearScreen>
    Translate_Results(FINGERS);
    255e:	82 e0       	ldi	r24, 0x02	; 2
    2560:	92 e0       	ldi	r25, 0x02	; 2
    2562:	0e 94 a2 10 	call	0x2144	; 0x2144 <Translate_Results>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	aa e7       	ldi	r26, 0x7A	; 122
    256c:	b4 e4       	ldi	r27, 0x44	; 68
    256e:	8b 87       	std	Y+11, r24	; 0x0b
    2570:	9c 87       	std	Y+12, r25	; 0x0c
    2572:	ad 87       	std	Y+13, r26	; 0x0d
    2574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	6b 85       	ldd	r22, Y+11	; 0x0b
    2578:	7c 85       	ldd	r23, Y+12	; 0x0c
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a e7       	ldi	r20, 0x7A	; 122
    2584:	55 e4       	ldi	r21, 0x45	; 69
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8f 83       	std	Y+7, r24	; 0x07
    2590:	98 87       	std	Y+8, r25	; 0x08
    2592:	a9 87       	std	Y+9, r26	; 0x09
    2594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <main+0x1a4>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
    25b6:	3f c0       	rjmp	.+126    	; 0x2636 <main+0x222>
	else if (__tmp > 65535)
    25b8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ba:	78 85       	ldd	r23, Y+8	; 0x08
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	57 e4       	ldi	r21, 0x47	; 71
    25c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	4c f5       	brge	.+82     	; 0x2622 <main+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	51 e4       	ldi	r21, 0x41	; 65
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <main+0x204>
    25fa:	80 e9       	ldi	r24, 0x90	; 144
    25fc:	91 e0       	ldi	r25, 0x01	; 1
    25fe:	9c 83       	std	Y+4, r25	; 0x04
    2600:	8b 83       	std	Y+3, r24	; 0x03
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <main+0x1f2>
    260a:	9c 83       	std	Y+4, r25	; 0x04
    260c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	8d 81       	ldd	r24, Y+5	; 0x05
    2610:	9e 81       	ldd	r25, Y+6	; 0x06
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f7       	brne	.-38     	; 0x25fa <main+0x1e6>
    2620:	79 cf       	rjmp	.-270    	; 0x2514 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <main+0x22e>
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	64 cf       	rjmp	.-312    	; 0x2514 <main+0x100>

0000264c <__mulsi3>:
    264c:	62 9f       	mul	r22, r18
    264e:	d0 01       	movw	r26, r0
    2650:	73 9f       	mul	r23, r19
    2652:	f0 01       	movw	r30, r0
    2654:	82 9f       	mul	r24, r18
    2656:	e0 0d       	add	r30, r0
    2658:	f1 1d       	adc	r31, r1
    265a:	64 9f       	mul	r22, r20
    265c:	e0 0d       	add	r30, r0
    265e:	f1 1d       	adc	r31, r1
    2660:	92 9f       	mul	r25, r18
    2662:	f0 0d       	add	r31, r0
    2664:	83 9f       	mul	r24, r19
    2666:	f0 0d       	add	r31, r0
    2668:	74 9f       	mul	r23, r20
    266a:	f0 0d       	add	r31, r0
    266c:	65 9f       	mul	r22, r21
    266e:	f0 0d       	add	r31, r0
    2670:	99 27       	eor	r25, r25
    2672:	72 9f       	mul	r23, r18
    2674:	b0 0d       	add	r27, r0
    2676:	e1 1d       	adc	r30, r1
    2678:	f9 1f       	adc	r31, r25
    267a:	63 9f       	mul	r22, r19
    267c:	b0 0d       	add	r27, r0
    267e:	e1 1d       	adc	r30, r1
    2680:	f9 1f       	adc	r31, r25
    2682:	bd 01       	movw	r22, r26
    2684:	cf 01       	movw	r24, r30
    2686:	11 24       	eor	r1, r1
    2688:	08 95       	ret

0000268a <__udivmodhi4>:
    268a:	aa 1b       	sub	r26, r26
    268c:	bb 1b       	sub	r27, r27
    268e:	51 e1       	ldi	r21, 0x11	; 17
    2690:	07 c0       	rjmp	.+14     	; 0x26a0 <__udivmodhi4_ep>

00002692 <__udivmodhi4_loop>:
    2692:	aa 1f       	adc	r26, r26
    2694:	bb 1f       	adc	r27, r27
    2696:	a6 17       	cp	r26, r22
    2698:	b7 07       	cpc	r27, r23
    269a:	10 f0       	brcs	.+4      	; 0x26a0 <__udivmodhi4_ep>
    269c:	a6 1b       	sub	r26, r22
    269e:	b7 0b       	sbc	r27, r23

000026a0 <__udivmodhi4_ep>:
    26a0:	88 1f       	adc	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	5a 95       	dec	r21
    26a6:	a9 f7       	brne	.-22     	; 0x2692 <__udivmodhi4_loop>
    26a8:	80 95       	com	r24
    26aa:	90 95       	com	r25
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	08 95       	ret

000026b2 <__divmodhi4>:
    26b2:	97 fb       	bst	r25, 7
    26b4:	09 2e       	mov	r0, r25
    26b6:	07 26       	eor	r0, r23
    26b8:	0a d0       	rcall	.+20     	; 0x26ce <__divmodhi4_neg1>
    26ba:	77 fd       	sbrc	r23, 7
    26bc:	04 d0       	rcall	.+8      	; 0x26c6 <__divmodhi4_neg2>
    26be:	e5 df       	rcall	.-54     	; 0x268a <__udivmodhi4>
    26c0:	06 d0       	rcall	.+12     	; 0x26ce <__divmodhi4_neg1>
    26c2:	00 20       	and	r0, r0
    26c4:	1a f4       	brpl	.+6      	; 0x26cc <__divmodhi4_exit>

000026c6 <__divmodhi4_neg2>:
    26c6:	70 95       	com	r23
    26c8:	61 95       	neg	r22
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255

000026cc <__divmodhi4_exit>:
    26cc:	08 95       	ret

000026ce <__divmodhi4_neg1>:
    26ce:	f6 f7       	brtc	.-4      	; 0x26cc <__divmodhi4_exit>
    26d0:	90 95       	com	r25
    26d2:	81 95       	neg	r24
    26d4:	9f 4f       	sbci	r25, 0xFF	; 255
    26d6:	08 95       	ret

000026d8 <__prologue_saves__>:
    26d8:	2f 92       	push	r2
    26da:	3f 92       	push	r3
    26dc:	4f 92       	push	r4
    26de:	5f 92       	push	r5
    26e0:	6f 92       	push	r6
    26e2:	7f 92       	push	r7
    26e4:	8f 92       	push	r8
    26e6:	9f 92       	push	r9
    26e8:	af 92       	push	r10
    26ea:	bf 92       	push	r11
    26ec:	cf 92       	push	r12
    26ee:	df 92       	push	r13
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	ca 1b       	sub	r28, r26
    2702:	db 0b       	sbc	r29, r27
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	09 94       	ijmp

00002710 <__epilogue_restores__>:
    2710:	2a 88       	ldd	r2, Y+18	; 0x12
    2712:	39 88       	ldd	r3, Y+17	; 0x11
    2714:	48 88       	ldd	r4, Y+16	; 0x10
    2716:	5f 84       	ldd	r5, Y+15	; 0x0f
    2718:	6e 84       	ldd	r6, Y+14	; 0x0e
    271a:	7d 84       	ldd	r7, Y+13	; 0x0d
    271c:	8c 84       	ldd	r8, Y+12	; 0x0c
    271e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2720:	aa 84       	ldd	r10, Y+10	; 0x0a
    2722:	b9 84       	ldd	r11, Y+9	; 0x09
    2724:	c8 84       	ldd	r12, Y+8	; 0x08
    2726:	df 80       	ldd	r13, Y+7	; 0x07
    2728:	ee 80       	ldd	r14, Y+6	; 0x06
    272a:	fd 80       	ldd	r15, Y+5	; 0x05
    272c:	0c 81       	ldd	r16, Y+4	; 0x04
    272e:	1b 81       	ldd	r17, Y+3	; 0x03
    2730:	aa 81       	ldd	r26, Y+2	; 0x02
    2732:	b9 81       	ldd	r27, Y+1	; 0x01
    2734:	ce 0f       	add	r28, r30
    2736:	d1 1d       	adc	r29, r1
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	ed 01       	movw	r28, r26
    2744:	08 95       	ret

00002746 <_exit>:
    2746:	f8 94       	cli

00002748 <__stop_program>:
    2748:	ff cf       	rjmp	.-2      	; 0x2748 <__stop_program>
